/* automatically generated by rust-bindgen */

pub const __llvm__ : :: std :: os :: raw :: c_uint = 1 ; pub const __clang__ : :: std :: os :: raw :: c_uint = 1 ; pub const __clang_major__ : :: std :: os :: raw :: c_uint = 6 ; pub const __clang_minor__ : :: std :: os :: raw :: c_uint = 0 ; pub const __clang_patchlevel__ : :: std :: os :: raw :: c_uint = 0 ; pub const __clang_version__ : & 'static [ u8 ; 31usize ] = b"6.0.0 (tags/RELEASE_600/final)\0" ; pub const __GNUC_MINOR__ : :: std :: os :: raw :: c_uint = 2 ; pub const __GNUC_PATCHLEVEL__ : :: std :: os :: raw :: c_uint = 1 ; pub const __GNUC__ : :: std :: os :: raw :: c_uint = 4 ; pub const __GXX_ABI_VERSION : :: std :: os :: raw :: c_uint = 1002 ; pub const __ATOMIC_RELAXED : :: std :: os :: raw :: c_uint = 0 ; pub const __ATOMIC_CONSUME : :: std :: os :: raw :: c_uint = 1 ; pub const __ATOMIC_ACQUIRE : :: std :: os :: raw :: c_uint = 2 ; pub const __ATOMIC_RELEASE : :: std :: os :: raw :: c_uint = 3 ; pub const __ATOMIC_ACQ_REL : :: std :: os :: raw :: c_uint = 4 ; pub const __ATOMIC_SEQ_CST : :: std :: os :: raw :: c_uint = 5 ; pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM : :: std :: os :: raw :: c_uint = 0 ; pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP : :: std :: os :: raw :: c_uint = 1 ; pub const __OPENCL_MEMORY_SCOPE_DEVICE : :: std :: os :: raw :: c_uint = 2 ; pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES : :: std :: os :: raw :: c_uint = 3 ; pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP : :: std :: os :: raw :: c_uint = 4 ; pub const __PRAGMA_REDEFINE_EXTNAME : :: std :: os :: raw :: c_uint = 1 ; pub const __VERSION__ : & 'static [ u8 ; 54usize ] = b"4.2.1 Compatible Clang 6.0.0 (tags/RELEASE_600/final)\0" ; pub const __OBJC_BOOL_IS_BOOL : :: std :: os :: raw :: c_uint = 0 ; pub const __CONSTANT_CFSTRINGS__ : :: std :: os :: raw :: c_uint = 1 ; pub const __ORDER_LITTLE_ENDIAN__ : :: std :: os :: raw :: c_uint = 1234 ; pub const __ORDER_BIG_ENDIAN__ : :: std :: os :: raw :: c_uint = 4321 ; pub const __ORDER_PDP_ENDIAN__ : :: std :: os :: raw :: c_uint = 3412 ; pub const __BYTE_ORDER__ : :: std :: os :: raw :: c_uint = 1234 ; pub const __LITTLE_ENDIAN__ : :: std :: os :: raw :: c_uint = 1 ; pub const _LP64 : :: std :: os :: raw :: c_uint = 1 ; pub const __LP64__ : :: std :: os :: raw :: c_uint = 1 ; pub const __CHAR_BIT__ : :: std :: os :: raw :: c_uint = 8 ; pub const __SCHAR_MAX__ : :: std :: os :: raw :: c_uint = 127 ; pub const __SHRT_MAX__ : :: std :: os :: raw :: c_uint = 32767 ; pub const __INT_MAX__ : :: std :: os :: raw :: c_uint = 2147483647 ; pub const __LONG_MAX__ : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const __LONG_LONG_MAX__ : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const __WCHAR_MAX__ : :: std :: os :: raw :: c_uint = 2147483647 ; pub const __WINT_MAX__ : :: std :: os :: raw :: c_uint = 4294967295 ; pub const __INTMAX_MAX__ : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const __SIZE_MAX__ : :: std :: os :: raw :: c_int = -1 ; pub const __UINTMAX_MAX__ : :: std :: os :: raw :: c_int = -1 ; pub const __PTRDIFF_MAX__ : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const __INTPTR_MAX__ : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const __UINTPTR_MAX__ : :: std :: os :: raw :: c_int = -1 ; pub const __SIZEOF_DOUBLE__ : :: std :: os :: raw :: c_uint = 8 ; pub const __SIZEOF_FLOAT__ : :: std :: os :: raw :: c_uint = 4 ; pub const __SIZEOF_INT__ : :: std :: os :: raw :: c_uint = 4 ; pub const __SIZEOF_LONG__ : :: std :: os :: raw :: c_uint = 8 ; pub const __SIZEOF_LONG_DOUBLE__ : :: std :: os :: raw :: c_uint = 16 ; pub const __SIZEOF_LONG_LONG__ : :: std :: os :: raw :: c_uint = 8 ; pub const __SIZEOF_POINTER__ : :: std :: os :: raw :: c_uint = 8 ; pub const __SIZEOF_SHORT__ : :: std :: os :: raw :: c_uint = 2 ; pub const __SIZEOF_PTRDIFF_T__ : :: std :: os :: raw :: c_uint = 8 ; pub const __SIZEOF_SIZE_T__ : :: std :: os :: raw :: c_uint = 8 ; pub const __SIZEOF_WCHAR_T__ : :: std :: os :: raw :: c_uint = 4 ; pub const __SIZEOF_WINT_T__ : :: std :: os :: raw :: c_uint = 4 ; pub const __SIZEOF_INT128__ : :: std :: os :: raw :: c_uint = 16 ; pub const __INTMAX_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __INTMAX_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __UINTMAX_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __UINTMAX_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __UINTMAX_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __UINTMAX_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __INTMAX_WIDTH__ : :: std :: os :: raw :: c_uint = 64 ; pub const __PTRDIFF_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __PTRDIFF_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __PTRDIFF_WIDTH__ : :: std :: os :: raw :: c_uint = 64 ; pub const __INTPTR_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __INTPTR_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __INTPTR_WIDTH__ : :: std :: os :: raw :: c_uint = 64 ; pub const __SIZE_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __SIZE_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __SIZE_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __SIZE_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __SIZE_WIDTH__ : :: std :: os :: raw :: c_uint = 64 ; pub const __WCHAR_WIDTH__ : :: std :: os :: raw :: c_uint = 32 ; pub const __WINT_WIDTH__ : :: std :: os :: raw :: c_uint = 32 ; pub const __SIG_ATOMIC_WIDTH__ : :: std :: os :: raw :: c_uint = 32 ; pub const __SIG_ATOMIC_MAX__ : :: std :: os :: raw :: c_uint = 2147483647 ; pub const __UINTMAX_WIDTH__ : :: std :: os :: raw :: c_uint = 64 ; pub const __UINTPTR_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __UINTPTR_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __UINTPTR_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __UINTPTR_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __UINTPTR_WIDTH__ : :: std :: os :: raw :: c_uint = 64 ; pub const __FLT16_HAS_DENORM__ : :: std :: os :: raw :: c_uint = 1 ; pub const __FLT16_DIG__ : :: std :: os :: raw :: c_uint = 3 ; pub const __FLT16_DECIMAL_DIG__ : :: std :: os :: raw :: c_uint = 5 ; pub const __FLT16_HAS_INFINITY__ : :: std :: os :: raw :: c_uint = 1 ; pub const __FLT16_HAS_QUIET_NAN__ : :: std :: os :: raw :: c_uint = 1 ; pub const __FLT16_MANT_DIG__ : :: std :: os :: raw :: c_uint = 11 ; pub const __FLT16_MAX_10_EXP__ : :: std :: os :: raw :: c_uint = 4 ; pub const __FLT16_MAX_EXP__ : :: std :: os :: raw :: c_uint = 15 ; pub const __FLT16_MIN_10_EXP__ : :: std :: os :: raw :: c_int = -13 ; pub const __FLT16_MIN_EXP__ : :: std :: os :: raw :: c_int = -14 ; pub const __FLT_HAS_DENORM__ : :: std :: os :: raw :: c_uint = 1 ; pub const __FLT_DIG__ : :: std :: os :: raw :: c_uint = 6 ; pub const __FLT_DECIMAL_DIG__ : :: std :: os :: raw :: c_uint = 9 ; pub const __FLT_HAS_INFINITY__ : :: std :: os :: raw :: c_uint = 1 ; pub const __FLT_HAS_QUIET_NAN__ : :: std :: os :: raw :: c_uint = 1 ; pub const __FLT_MANT_DIG__ : :: std :: os :: raw :: c_uint = 24 ; pub const __FLT_MAX_10_EXP__ : :: std :: os :: raw :: c_uint = 38 ; pub const __FLT_MAX_EXP__ : :: std :: os :: raw :: c_uint = 128 ; pub const __FLT_MIN_10_EXP__ : :: std :: os :: raw :: c_int = -37 ; pub const __FLT_MIN_EXP__ : :: std :: os :: raw :: c_int = -125 ; pub const __DBL_HAS_DENORM__ : :: std :: os :: raw :: c_uint = 1 ; pub const __DBL_DIG__ : :: std :: os :: raw :: c_uint = 15 ; pub const __DBL_DECIMAL_DIG__ : :: std :: os :: raw :: c_uint = 17 ; pub const __DBL_HAS_INFINITY__ : :: std :: os :: raw :: c_uint = 1 ; pub const __DBL_HAS_QUIET_NAN__ : :: std :: os :: raw :: c_uint = 1 ; pub const __DBL_MANT_DIG__ : :: std :: os :: raw :: c_uint = 53 ; pub const __DBL_MAX_10_EXP__ : :: std :: os :: raw :: c_uint = 308 ; pub const __DBL_MAX_EXP__ : :: std :: os :: raw :: c_uint = 1024 ; pub const __DBL_MIN_10_EXP__ : :: std :: os :: raw :: c_int = -307 ; pub const __DBL_MIN_EXP__ : :: std :: os :: raw :: c_int = -1021 ; pub const __LDBL_HAS_DENORM__ : :: std :: os :: raw :: c_uint = 1 ; pub const __LDBL_DIG__ : :: std :: os :: raw :: c_uint = 18 ; pub const __LDBL_DECIMAL_DIG__ : :: std :: os :: raw :: c_uint = 21 ; pub const __LDBL_HAS_INFINITY__ : :: std :: os :: raw :: c_uint = 1 ; pub const __LDBL_HAS_QUIET_NAN__ : :: std :: os :: raw :: c_uint = 1 ; pub const __LDBL_MANT_DIG__ : :: std :: os :: raw :: c_uint = 64 ; pub const __LDBL_MAX_10_EXP__ : :: std :: os :: raw :: c_uint = 4932 ; pub const __LDBL_MAX_EXP__ : :: std :: os :: raw :: c_uint = 16384 ; pub const __LDBL_MIN_10_EXP__ : :: std :: os :: raw :: c_int = -4931 ; pub const __LDBL_MIN_EXP__ : :: std :: os :: raw :: c_int = -16381 ; pub const __POINTER_WIDTH__ : :: std :: os :: raw :: c_uint = 64 ; pub const __BIGGEST_ALIGNMENT__ : :: std :: os :: raw :: c_uint = 16 ; pub const __WINT_UNSIGNED__ : :: std :: os :: raw :: c_uint = 1 ; pub const __INT8_FMTd__ : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const __INT8_FMTi__ : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const __INT16_FMTd__ : & 'static [ u8 ; 3usize ] = b"hd\0" ; pub const __INT16_FMTi__ : & 'static [ u8 ; 3usize ] = b"hi\0" ; pub const __INT32_FMTd__ : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const __INT32_FMTi__ : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const __INT64_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __INT64_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __UINT8_FMTo__ : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const __UINT8_FMTu__ : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const __UINT8_FMTx__ : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const __UINT8_FMTX__ : & 'static [ u8 ; 4usize ] = b"hhX\0" ; pub const __UINT8_MAX__ : :: std :: os :: raw :: c_uint = 255 ; pub const __INT8_MAX__ : :: std :: os :: raw :: c_uint = 127 ; pub const __UINT16_FMTo__ : & 'static [ u8 ; 3usize ] = b"ho\0" ; pub const __UINT16_FMTu__ : & 'static [ u8 ; 3usize ] = b"hu\0" ; pub const __UINT16_FMTx__ : & 'static [ u8 ; 3usize ] = b"hx\0" ; pub const __UINT16_FMTX__ : & 'static [ u8 ; 3usize ] = b"hX\0" ; pub const __UINT16_MAX__ : :: std :: os :: raw :: c_uint = 65535 ; pub const __INT16_MAX__ : :: std :: os :: raw :: c_uint = 32767 ; pub const __UINT32_FMTo__ : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const __UINT32_FMTu__ : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const __UINT32_FMTx__ : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const __UINT32_FMTX__ : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const __UINT32_MAX__ : :: std :: os :: raw :: c_uint = 4294967295 ; pub const __INT32_MAX__ : :: std :: os :: raw :: c_uint = 2147483647 ; pub const __UINT64_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __UINT64_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __UINT64_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __UINT64_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __UINT64_MAX__ : :: std :: os :: raw :: c_int = -1 ; pub const __INT64_MAX__ : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const __INT_LEAST8_MAX__ : :: std :: os :: raw :: c_uint = 127 ; pub const __INT_LEAST8_FMTd__ : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const __INT_LEAST8_FMTi__ : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const __UINT_LEAST8_MAX__ : :: std :: os :: raw :: c_uint = 255 ; pub const __UINT_LEAST8_FMTo__ : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const __UINT_LEAST8_FMTu__ : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const __UINT_LEAST8_FMTx__ : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const __UINT_LEAST8_FMTX__ : & 'static [ u8 ; 4usize ] = b"hhX\0" ; pub const __INT_LEAST16_MAX__ : :: std :: os :: raw :: c_uint = 32767 ; pub const __INT_LEAST16_FMTd__ : & 'static [ u8 ; 3usize ] = b"hd\0" ; pub const __INT_LEAST16_FMTi__ : & 'static [ u8 ; 3usize ] = b"hi\0" ; pub const __UINT_LEAST16_MAX__ : :: std :: os :: raw :: c_uint = 65535 ; pub const __UINT_LEAST16_FMTo__ : & 'static [ u8 ; 3usize ] = b"ho\0" ; pub const __UINT_LEAST16_FMTu__ : & 'static [ u8 ; 3usize ] = b"hu\0" ; pub const __UINT_LEAST16_FMTx__ : & 'static [ u8 ; 3usize ] = b"hx\0" ; pub const __UINT_LEAST16_FMTX__ : & 'static [ u8 ; 3usize ] = b"hX\0" ; pub const __INT_LEAST32_MAX__ : :: std :: os :: raw :: c_uint = 2147483647 ; pub const __INT_LEAST32_FMTd__ : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const __INT_LEAST32_FMTi__ : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const __UINT_LEAST32_MAX__ : :: std :: os :: raw :: c_uint = 4294967295 ; pub const __UINT_LEAST32_FMTo__ : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const __UINT_LEAST32_FMTu__ : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const __UINT_LEAST32_FMTx__ : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const __UINT_LEAST32_FMTX__ : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const __INT_LEAST64_MAX__ : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const __INT_LEAST64_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __INT_LEAST64_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __UINT_LEAST64_MAX__ : :: std :: os :: raw :: c_int = -1 ; pub const __UINT_LEAST64_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __UINT_LEAST64_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __UINT_LEAST64_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __UINT_LEAST64_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __INT_FAST8_MAX__ : :: std :: os :: raw :: c_uint = 127 ; pub const __INT_FAST8_FMTd__ : & 'static [ u8 ; 4usize ] = b"hhd\0" ; pub const __INT_FAST8_FMTi__ : & 'static [ u8 ; 4usize ] = b"hhi\0" ; pub const __UINT_FAST8_MAX__ : :: std :: os :: raw :: c_uint = 255 ; pub const __UINT_FAST8_FMTo__ : & 'static [ u8 ; 4usize ] = b"hho\0" ; pub const __UINT_FAST8_FMTu__ : & 'static [ u8 ; 4usize ] = b"hhu\0" ; pub const __UINT_FAST8_FMTx__ : & 'static [ u8 ; 4usize ] = b"hhx\0" ; pub const __UINT_FAST8_FMTX__ : & 'static [ u8 ; 4usize ] = b"hhX\0" ; pub const __INT_FAST16_MAX__ : :: std :: os :: raw :: c_uint = 32767 ; pub const __INT_FAST16_FMTd__ : & 'static [ u8 ; 3usize ] = b"hd\0" ; pub const __INT_FAST16_FMTi__ : & 'static [ u8 ; 3usize ] = b"hi\0" ; pub const __UINT_FAST16_MAX__ : :: std :: os :: raw :: c_uint = 65535 ; pub const __UINT_FAST16_FMTo__ : & 'static [ u8 ; 3usize ] = b"ho\0" ; pub const __UINT_FAST16_FMTu__ : & 'static [ u8 ; 3usize ] = b"hu\0" ; pub const __UINT_FAST16_FMTx__ : & 'static [ u8 ; 3usize ] = b"hx\0" ; pub const __UINT_FAST16_FMTX__ : & 'static [ u8 ; 3usize ] = b"hX\0" ; pub const __INT_FAST32_MAX__ : :: std :: os :: raw :: c_uint = 2147483647 ; pub const __INT_FAST32_FMTd__ : & 'static [ u8 ; 2usize ] = b"d\0" ; pub const __INT_FAST32_FMTi__ : & 'static [ u8 ; 2usize ] = b"i\0" ; pub const __UINT_FAST32_MAX__ : :: std :: os :: raw :: c_uint = 4294967295 ; pub const __UINT_FAST32_FMTo__ : & 'static [ u8 ; 2usize ] = b"o\0" ; pub const __UINT_FAST32_FMTu__ : & 'static [ u8 ; 2usize ] = b"u\0" ; pub const __UINT_FAST32_FMTx__ : & 'static [ u8 ; 2usize ] = b"x\0" ; pub const __UINT_FAST32_FMTX__ : & 'static [ u8 ; 2usize ] = b"X\0" ; pub const __INT_FAST64_MAX__ : :: std :: os :: raw :: c_ulonglong = 9223372036854775807 ; pub const __INT_FAST64_FMTd__ : & 'static [ u8 ; 3usize ] = b"ld\0" ; pub const __INT_FAST64_FMTi__ : & 'static [ u8 ; 3usize ] = b"li\0" ; pub const __UINT_FAST64_MAX__ : :: std :: os :: raw :: c_int = -1 ; pub const __UINT_FAST64_FMTo__ : & 'static [ u8 ; 3usize ] = b"lo\0" ; pub const __UINT_FAST64_FMTu__ : & 'static [ u8 ; 3usize ] = b"lu\0" ; pub const __UINT_FAST64_FMTx__ : & 'static [ u8 ; 3usize ] = b"lx\0" ; pub const __UINT_FAST64_FMTX__ : & 'static [ u8 ; 3usize ] = b"lX\0" ; pub const __FINITE_MATH_ONLY__ : :: std :: os :: raw :: c_uint = 0 ; pub const __GNUC_STDC_INLINE__ : :: std :: os :: raw :: c_uint = 1 ; pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL : :: std :: os :: raw :: c_uint = 1 ; pub const __CLANG_ATOMIC_BOOL_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __CLANG_ATOMIC_CHAR_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __CLANG_ATOMIC_SHORT_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __CLANG_ATOMIC_INT_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __CLANG_ATOMIC_LONG_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __CLANG_ATOMIC_LLONG_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __CLANG_ATOMIC_POINTER_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __GCC_ATOMIC_BOOL_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __GCC_ATOMIC_CHAR_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __GCC_ATOMIC_SHORT_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __GCC_ATOMIC_INT_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __GCC_ATOMIC_LONG_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __GCC_ATOMIC_LLONG_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __GCC_ATOMIC_POINTER_LOCK_FREE : :: std :: os :: raw :: c_uint = 2 ; pub const __NO_INLINE__ : :: std :: os :: raw :: c_uint = 1 ; pub const __FLT_EVAL_METHOD__ : :: std :: os :: raw :: c_uint = 0 ; pub const __FLT_RADIX__ : :: std :: os :: raw :: c_uint = 2 ; pub const __DECIMAL_DIG__ : :: std :: os :: raw :: c_uint = 21 ; pub const __amd64__ : :: std :: os :: raw :: c_uint = 1 ; pub const __amd64 : :: std :: os :: raw :: c_uint = 1 ; pub const __x86_64 : :: std :: os :: raw :: c_uint = 1 ; pub const __x86_64__ : :: std :: os :: raw :: c_uint = 1 ; pub const __k8 : :: std :: os :: raw :: c_uint = 1 ; pub const __k8__ : :: std :: os :: raw :: c_uint = 1 ; pub const __tune_k8__ : :: std :: os :: raw :: c_uint = 1 ; pub const __NO_MATH_INLINES : :: std :: os :: raw :: c_uint = 1 ; pub const __FXSR__ : :: std :: os :: raw :: c_uint = 1 ; pub const __SSE2__ : :: std :: os :: raw :: c_uint = 1 ; pub const __SSE2_MATH__ : :: std :: os :: raw :: c_uint = 1 ; pub const __SSE__ : :: std :: os :: raw :: c_uint = 1 ; pub const __SSE_MATH__ : :: std :: os :: raw :: c_uint = 1 ; pub const __MMX__ : :: std :: os :: raw :: c_uint = 1 ; pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 : :: std :: os :: raw :: c_uint = 1 ; pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 : :: std :: os :: raw :: c_uint = 1 ; pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 : :: std :: os :: raw :: c_uint = 1 ; pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 : :: std :: os :: raw :: c_uint = 1 ; pub const __SIZEOF_FLOAT128__ : :: std :: os :: raw :: c_uint = 16 ; pub const unix : :: std :: os :: raw :: c_uint = 1 ; pub const __unix : :: std :: os :: raw :: c_uint = 1 ; pub const __unix__ : :: std :: os :: raw :: c_uint = 1 ; pub const linux : :: std :: os :: raw :: c_uint = 1 ; pub const __linux : :: std :: os :: raw :: c_uint = 1 ; pub const __linux__ : :: std :: os :: raw :: c_uint = 1 ; pub const __gnu_linux__ : :: std :: os :: raw :: c_uint = 1 ; pub const __ELF__ : :: std :: os :: raw :: c_uint = 1 ; pub const __FLOAT128__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_HOSTED__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_VERSION__ : :: std :: os :: raw :: c_uint = 201112 ; pub const __STDC_UTF_16__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_UTF_32__ : :: std :: os :: raw :: c_uint = 1 ; pub const OPAL_BUILD_PLATFORM_COMPILER_FAMILYID : :: std :: os :: raw :: c_uint = 1 ; pub const OPAL_BUILD_PLATFORM_COMPILER_VERSION : :: std :: os :: raw :: c_uint = 459520 ; pub const OPAL_STDC_HEADERS : :: std :: os :: raw :: c_uint = 1 ; pub const OPAL_HAVE_ATTRIBUTE_DEPRECATED : :: std :: os :: raw :: c_uint = 1 ; pub const OPAL_HAVE_ATTRIBUTE_DEPRECATED_ARGUMENT : :: std :: os :: raw :: c_uint = 1 ; pub const OPAL_HAVE_SYS_TIME_H : :: std :: os :: raw :: c_uint = 1 ; pub const OPAL_HAVE_LONG_LONG : :: std :: os :: raw :: c_uint = 1 ; pub const OPAL_MAX_DATAREP_STRING : :: std :: os :: raw :: c_uint = 128 ; pub const OPAL_MAX_ERROR_STRING : :: std :: os :: raw :: c_uint = 256 ; pub const OPAL_MAX_INFO_KEY : :: std :: os :: raw :: c_uint = 36 ; pub const OPAL_MAX_INFO_VAL : :: std :: os :: raw :: c_uint = 256 ; pub const OPAL_MAX_OBJECT_NAME : :: std :: os :: raw :: c_uint = 64 ; pub const OPAL_MAX_PORT_NAME : :: std :: os :: raw :: c_uint = 1024 ; pub const OPAL_MAX_PROCESSOR_NAME : :: std :: os :: raw :: c_uint = 256 ; pub const OMPI_HAVE_FORTRAN_LOGICAL1 : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_FORTRAN_LOGICAL2 : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_FORTRAN_LOGICAL4 : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_FORTRAN_LOGICAL8 : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_FORTRAN_INTEGER1 : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_FORTRAN_INTEGER16 : :: std :: os :: raw :: c_uint = 0 ; pub const OMPI_HAVE_FORTRAN_INTEGER2 : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_FORTRAN_INTEGER4 : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_FORTRAN_INTEGER8 : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_FORTRAN_REAL16 : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_FORTRAN_REAL2 : :: std :: os :: raw :: c_uint = 0 ; pub const OMPI_HAVE_FORTRAN_REAL4 : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_FORTRAN_REAL8 : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_FLOAT__COMPLEX : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_DOUBLE__COMPLEX : :: std :: os :: raw :: c_uint = 1 ; pub const HAVE_LONG_DOUBLE__COMPLEX : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_MPI_OFFSET_SIZE : :: std :: os :: raw :: c_uint = 8 ; pub const OMPI_BUILD_CXX_BINDINGS : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_WANT_MPI_CXX_SEEK : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_CXX_SUPPORTS_2D_CONST_CAST : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_PARAM_CHECK : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_WANT_MPI_INTERFACE_WARNING : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_HAVE_CXX_EXCEPTION_SUPPORT : :: std :: os :: raw :: c_uint = 0 ; pub const OMPI_MAJOR_VERSION : :: std :: os :: raw :: c_uint = 2 ; pub const OMPI_MINOR_VERSION : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_RELEASE_VERSION : :: std :: os :: raw :: c_uint = 1 ; pub const OPAL_C_HAVE_VISIBILITY : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_PROVIDE_MPI_FILE_INTERFACE : :: std :: os :: raw :: c_uint = 1 ; pub const OMPI_BUILDING : :: std :: os :: raw :: c_uint = 0 ; pub const OPEN_MPI : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_VERSION : :: std :: os :: raw :: c_uint = 3 ; pub const MPI_SUBVERSION : :: std :: os :: raw :: c_uint = 1 ; pub const PLATFORM_COMPILER_UNKNOWN : :: std :: os :: raw :: c_uint = 1 ; pub const PLATFORM_COMPILER_GNU : :: std :: os :: raw :: c_uint = 1 ; pub const PLATFORM_COMPILER_FAMILYID : :: std :: os :: raw :: c_uint = 1 ; pub const PLATFORM_COMPILER_GNU_C : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_ANY_SOURCE : :: std :: os :: raw :: c_int = -1 ; pub const MPI_PROC_NULL : :: std :: os :: raw :: c_int = -2 ; pub const MPI_ROOT : :: std :: os :: raw :: c_int = -4 ; pub const MPI_ANY_TAG : :: std :: os :: raw :: c_int = -1 ; pub const MPI_MAX_PROCESSOR_NAME : :: std :: os :: raw :: c_uint = 256 ; pub const MPI_MAX_ERROR_STRING : :: std :: os :: raw :: c_uint = 256 ; pub const MPI_MAX_OBJECT_NAME : :: std :: os :: raw :: c_uint = 64 ; pub const MPI_MAX_LIBRARY_VERSION_STRING : :: std :: os :: raw :: c_uint = 256 ; pub const MPI_UNDEFINED : :: std :: os :: raw :: c_int = -32766 ; pub const MPI_DIST_GRAPH : :: std :: os :: raw :: c_uint = 3 ; pub const MPI_CART : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_GRAPH : :: std :: os :: raw :: c_uint = 2 ; pub const MPI_KEYVAL_INVALID : :: std :: os :: raw :: c_int = -1 ; pub const MPI_BSEND_OVERHEAD : :: std :: os :: raw :: c_uint = 128 ; pub const MPI_MAX_INFO_KEY : :: std :: os :: raw :: c_uint = 36 ; pub const MPI_MAX_INFO_VAL : :: std :: os :: raw :: c_uint = 256 ; pub const MPI_MAX_PORT_NAME : :: std :: os :: raw :: c_uint = 1024 ; pub const MPI_ORDER_C : :: std :: os :: raw :: c_uint = 0 ; pub const MPI_ORDER_FORTRAN : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_DISTRIBUTE_BLOCK : :: std :: os :: raw :: c_uint = 0 ; pub const MPI_DISTRIBUTE_CYCLIC : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_DISTRIBUTE_NONE : :: std :: os :: raw :: c_uint = 2 ; pub const MPI_DISTRIBUTE_DFLT_DARG : :: std :: os :: raw :: c_int = -1 ; pub const MPI_MODE_CREATE : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_MODE_RDONLY : :: std :: os :: raw :: c_uint = 2 ; pub const MPI_MODE_WRONLY : :: std :: os :: raw :: c_uint = 4 ; pub const MPI_MODE_RDWR : :: std :: os :: raw :: c_uint = 8 ; pub const MPI_MODE_DELETE_ON_CLOSE : :: std :: os :: raw :: c_uint = 16 ; pub const MPI_MODE_UNIQUE_OPEN : :: std :: os :: raw :: c_uint = 32 ; pub const MPI_MODE_EXCL : :: std :: os :: raw :: c_uint = 64 ; pub const MPI_MODE_APPEND : :: std :: os :: raw :: c_uint = 128 ; pub const MPI_MODE_SEQUENTIAL : :: std :: os :: raw :: c_uint = 256 ; pub const MPI_DISPLACEMENT_CURRENT : :: std :: os :: raw :: c_int = -54278278 ; pub const MPI_SEEK_SET : :: std :: os :: raw :: c_uint = 600 ; pub const MPI_SEEK_CUR : :: std :: os :: raw :: c_uint = 602 ; pub const MPI_SEEK_END : :: std :: os :: raw :: c_uint = 604 ; pub const MPI_MAX_DATAREP_STRING : :: std :: os :: raw :: c_uint = 128 ; pub const MPI_MODE_NOCHECK : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_MODE_NOPRECEDE : :: std :: os :: raw :: c_uint = 2 ; pub const MPI_MODE_NOPUT : :: std :: os :: raw :: c_uint = 4 ; pub const MPI_MODE_NOSTORE : :: std :: os :: raw :: c_uint = 8 ; pub const MPI_MODE_NOSUCCEED : :: std :: os :: raw :: c_uint = 16 ; pub const MPI_LOCK_EXCLUSIVE : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_LOCK_SHARED : :: std :: os :: raw :: c_uint = 2 ; pub const MPI_WIN_FLAVOR_CREATE : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_WIN_FLAVOR_ALLOCATE : :: std :: os :: raw :: c_uint = 2 ; pub const MPI_WIN_FLAVOR_DYNAMIC : :: std :: os :: raw :: c_uint = 3 ; pub const MPI_WIN_FLAVOR_SHARED : :: std :: os :: raw :: c_uint = 4 ; pub const MPI_WIN_UNIFIED : :: std :: os :: raw :: c_uint = 0 ; pub const MPI_WIN_SEPARATE : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_SUCCESS : :: std :: os :: raw :: c_uint = 0 ; pub const MPI_ERR_BUFFER : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_ERR_COUNT : :: std :: os :: raw :: c_uint = 2 ; pub const MPI_ERR_TYPE : :: std :: os :: raw :: c_uint = 3 ; pub const MPI_ERR_TAG : :: std :: os :: raw :: c_uint = 4 ; pub const MPI_ERR_COMM : :: std :: os :: raw :: c_uint = 5 ; pub const MPI_ERR_RANK : :: std :: os :: raw :: c_uint = 6 ; pub const MPI_ERR_REQUEST : :: std :: os :: raw :: c_uint = 7 ; pub const MPI_ERR_ROOT : :: std :: os :: raw :: c_uint = 8 ; pub const MPI_ERR_GROUP : :: std :: os :: raw :: c_uint = 9 ; pub const MPI_ERR_OP : :: std :: os :: raw :: c_uint = 10 ; pub const MPI_ERR_TOPOLOGY : :: std :: os :: raw :: c_uint = 11 ; pub const MPI_ERR_DIMS : :: std :: os :: raw :: c_uint = 12 ; pub const MPI_ERR_ARG : :: std :: os :: raw :: c_uint = 13 ; pub const MPI_ERR_UNKNOWN : :: std :: os :: raw :: c_uint = 14 ; pub const MPI_ERR_TRUNCATE : :: std :: os :: raw :: c_uint = 15 ; pub const MPI_ERR_OTHER : :: std :: os :: raw :: c_uint = 16 ; pub const MPI_ERR_INTERN : :: std :: os :: raw :: c_uint = 17 ; pub const MPI_ERR_IN_STATUS : :: std :: os :: raw :: c_uint = 18 ; pub const MPI_ERR_PENDING : :: std :: os :: raw :: c_uint = 19 ; pub const MPI_ERR_ACCESS : :: std :: os :: raw :: c_uint = 20 ; pub const MPI_ERR_AMODE : :: std :: os :: raw :: c_uint = 21 ; pub const MPI_ERR_ASSERT : :: std :: os :: raw :: c_uint = 22 ; pub const MPI_ERR_BAD_FILE : :: std :: os :: raw :: c_uint = 23 ; pub const MPI_ERR_BASE : :: std :: os :: raw :: c_uint = 24 ; pub const MPI_ERR_CONVERSION : :: std :: os :: raw :: c_uint = 25 ; pub const MPI_ERR_DISP : :: std :: os :: raw :: c_uint = 26 ; pub const MPI_ERR_DUP_DATAREP : :: std :: os :: raw :: c_uint = 27 ; pub const MPI_ERR_FILE_EXISTS : :: std :: os :: raw :: c_uint = 28 ; pub const MPI_ERR_FILE_IN_USE : :: std :: os :: raw :: c_uint = 29 ; pub const MPI_ERR_FILE : :: std :: os :: raw :: c_uint = 30 ; pub const MPI_ERR_INFO_KEY : :: std :: os :: raw :: c_uint = 31 ; pub const MPI_ERR_INFO_NOKEY : :: std :: os :: raw :: c_uint = 32 ; pub const MPI_ERR_INFO_VALUE : :: std :: os :: raw :: c_uint = 33 ; pub const MPI_ERR_INFO : :: std :: os :: raw :: c_uint = 34 ; pub const MPI_ERR_IO : :: std :: os :: raw :: c_uint = 35 ; pub const MPI_ERR_KEYVAL : :: std :: os :: raw :: c_uint = 36 ; pub const MPI_ERR_LOCKTYPE : :: std :: os :: raw :: c_uint = 37 ; pub const MPI_ERR_NAME : :: std :: os :: raw :: c_uint = 38 ; pub const MPI_ERR_NO_MEM : :: std :: os :: raw :: c_uint = 39 ; pub const MPI_ERR_NOT_SAME : :: std :: os :: raw :: c_uint = 40 ; pub const MPI_ERR_NO_SPACE : :: std :: os :: raw :: c_uint = 41 ; pub const MPI_ERR_NO_SUCH_FILE : :: std :: os :: raw :: c_uint = 42 ; pub const MPI_ERR_PORT : :: std :: os :: raw :: c_uint = 43 ; pub const MPI_ERR_QUOTA : :: std :: os :: raw :: c_uint = 44 ; pub const MPI_ERR_READ_ONLY : :: std :: os :: raw :: c_uint = 45 ; pub const MPI_ERR_RMA_CONFLICT : :: std :: os :: raw :: c_uint = 46 ; pub const MPI_ERR_RMA_SYNC : :: std :: os :: raw :: c_uint = 47 ; pub const MPI_ERR_SERVICE : :: std :: os :: raw :: c_uint = 48 ; pub const MPI_ERR_SIZE : :: std :: os :: raw :: c_uint = 49 ; pub const MPI_ERR_SPAWN : :: std :: os :: raw :: c_uint = 50 ; pub const MPI_ERR_UNSUPPORTED_DATAREP : :: std :: os :: raw :: c_uint = 51 ; pub const MPI_ERR_UNSUPPORTED_OPERATION : :: std :: os :: raw :: c_uint = 52 ; pub const MPI_ERR_WIN : :: std :: os :: raw :: c_uint = 53 ; pub const MPI_T_ERR_MEMORY : :: std :: os :: raw :: c_uint = 54 ; pub const MPI_T_ERR_NOT_INITIALIZED : :: std :: os :: raw :: c_uint = 55 ; pub const MPI_T_ERR_CANNOT_INIT : :: std :: os :: raw :: c_uint = 56 ; pub const MPI_T_ERR_INVALID_INDEX : :: std :: os :: raw :: c_uint = 57 ; pub const MPI_T_ERR_INVALID_ITEM : :: std :: os :: raw :: c_uint = 58 ; pub const MPI_T_ERR_INVALID_HANDLE : :: std :: os :: raw :: c_uint = 59 ; pub const MPI_T_ERR_OUT_OF_HANDLES : :: std :: os :: raw :: c_uint = 60 ; pub const MPI_T_ERR_OUT_OF_SESSIONS : :: std :: os :: raw :: c_uint = 61 ; pub const MPI_T_ERR_INVALID_SESSION : :: std :: os :: raw :: c_uint = 62 ; pub const MPI_T_ERR_CVAR_SET_NOT_NOW : :: std :: os :: raw :: c_uint = 63 ; pub const MPI_T_ERR_CVAR_SET_NEVER : :: std :: os :: raw :: c_uint = 64 ; pub const MPI_T_ERR_PVAR_NO_STARTSTOP : :: std :: os :: raw :: c_uint = 65 ; pub const MPI_T_ERR_PVAR_NO_WRITE : :: std :: os :: raw :: c_uint = 66 ; pub const MPI_T_ERR_PVAR_NO_ATOMIC : :: std :: os :: raw :: c_uint = 67 ; pub const MPI_ERR_RMA_RANGE : :: std :: os :: raw :: c_uint = 68 ; pub const MPI_ERR_RMA_ATTACH : :: std :: os :: raw :: c_uint = 69 ; pub const MPI_ERR_RMA_FLAVOR : :: std :: os :: raw :: c_uint = 70 ; pub const MPI_ERR_RMA_SHARED : :: std :: os :: raw :: c_uint = 71 ; pub const MPI_T_ERR_INVALID : :: std :: os :: raw :: c_uint = 72 ; pub const MPI_T_ERR_INVALID_NAME : :: std :: os :: raw :: c_uint = 73 ; pub const MPI_ERR_LASTCODE : :: std :: os :: raw :: c_uint = 92 ; pub const MPI_TYPECLASS_INTEGER : :: std :: os :: raw :: c_uint = 1 ; pub const MPI_TYPECLASS_REAL : :: std :: os :: raw :: c_uint = 2 ; pub const MPI_TYPECLASS_COMPLEX : :: std :: os :: raw :: c_uint = 3 ; pub type wchar_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct max_align_t { pub __clang_max_align_nonce1 : :: std :: os :: raw :: c_longlong , pub __bindgen_padding_0 : u64 , pub __clang_max_align_nonce2 : f64 , } # [ test ] fn bindgen_test_layout_max_align_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < max_align_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( max_align_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const max_align_t ) ) . __clang_max_align_nonce1 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const max_align_t ) ) . __clang_max_align_nonce2 as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce2 ) ) ) ; } pub type MPI_Aint = isize ; pub type MPI_Offset = :: std :: os :: raw :: c_longlong ; pub type MPI_Count = :: std :: os :: raw :: c_longlong ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_communicator_t { _unused : [ u8 ; 0 ] } pub type MPI_Comm = * mut ompi_communicator_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_datatype_t { _unused : [ u8 ; 0 ] } pub type MPI_Datatype = * mut ompi_datatype_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_errhandler_t { _unused : [ u8 ; 0 ] } pub type MPI_Errhandler = * mut ompi_errhandler_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_file_t { _unused : [ u8 ; 0 ] } pub type MPI_File = * mut ompi_file_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_group_t { _unused : [ u8 ; 0 ] } pub type MPI_Group = * mut ompi_group_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_info_t { _unused : [ u8 ; 0 ] } pub type MPI_Info = * mut ompi_info_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_op_t { _unused : [ u8 ; 0 ] } pub type MPI_Op = * mut ompi_op_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_request_t { _unused : [ u8 ; 0 ] } pub type MPI_Request = * mut ompi_request_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_message_t { _unused : [ u8 ; 0 ] } pub type MPI_Message = * mut ompi_message_t ; pub type MPI_Status = ompi_status_public_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_win_t { _unused : [ u8 ; 0 ] } pub type MPI_Win = * mut ompi_win_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct mca_base_var_enum_t { _unused : [ u8 ; 0 ] } pub type MPI_T_enum = * mut mca_base_var_enum_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_mpit_cvar_handle_t { _unused : [ u8 ; 0 ] } pub type MPI_T_cvar_handle = * mut ompi_mpit_cvar_handle_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct mca_base_pvar_handle_t { _unused : [ u8 ; 0 ] } pub type MPI_T_pvar_handle = * mut mca_base_pvar_handle_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct mca_base_pvar_session_t { _unused : [ u8 ; 0 ] } pub type MPI_T_pvar_session = * mut mca_base_pvar_session_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_status_public_t { pub MPI_SOURCE : :: std :: os :: raw :: c_int , pub MPI_TAG : :: std :: os :: raw :: c_int , pub MPI_ERROR : :: std :: os :: raw :: c_int , pub _cancelled : :: std :: os :: raw :: c_int , pub _ucount : usize , } # [ test ] fn bindgen_test_layout_ompi_status_public_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ompi_status_public_t > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( ompi_status_public_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ompi_status_public_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ompi_status_public_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ompi_status_public_t ) ) . MPI_SOURCE as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( ompi_status_public_t ) , "::" , stringify ! ( MPI_SOURCE ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ompi_status_public_t ) ) . MPI_TAG as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( ompi_status_public_t ) , "::" , stringify ! ( MPI_TAG ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ompi_status_public_t ) ) . MPI_ERROR as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( ompi_status_public_t ) , "::" , stringify ! ( MPI_ERROR ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ompi_status_public_t ) ) . _cancelled as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( ompi_status_public_t ) , "::" , stringify ! ( _cancelled ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ompi_status_public_t ) ) . _ucount as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( ompi_status_public_t ) , "::" , stringify ! ( _ucount ) ) ) ; } pub type MPI_Copy_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : MPI_Comm , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut :: std :: os :: raw :: c_void , arg5 : * mut :: std :: os :: raw :: c_void , arg6 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Delete_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : MPI_Comm , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Datarep_extent_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : MPI_Datatype , arg2 : * mut MPI_Aint , arg3 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Datarep_conversion_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : MPI_Datatype , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_void , arg5 : MPI_Offset , arg6 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Comm_errhandler_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut MPI_Comm , arg2 : * mut :: std :: os :: raw :: c_int ) > ; pub type MPI_Comm_errhandler_fn = MPI_Comm_errhandler_function ; pub type ompi_file_errhandler_fn = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut MPI_File , arg2 : * mut :: std :: os :: raw :: c_int ) > ; pub type MPI_File_errhandler_fn = ompi_file_errhandler_fn ; pub type MPI_File_errhandler_function = ompi_file_errhandler_fn ; pub type MPI_Win_errhandler_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut MPI_Win , arg2 : * mut :: std :: os :: raw :: c_int ) > ; pub type MPI_Win_errhandler_fn = MPI_Win_errhandler_function ; pub type MPI_Handler_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut MPI_Comm , arg2 : * mut :: std :: os :: raw :: c_int ) > ; pub type MPI_User_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut MPI_Datatype ) > ; pub type MPI_Comm_copy_attr_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : MPI_Comm , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut :: std :: os :: raw :: c_void , arg5 : * mut :: std :: os :: raw :: c_void , arg6 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Comm_delete_attr_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : MPI_Comm , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Type_copy_attr_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : MPI_Datatype , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut :: std :: os :: raw :: c_void , arg5 : * mut :: std :: os :: raw :: c_void , arg6 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Type_delete_attr_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : MPI_Datatype , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Win_copy_attr_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : MPI_Win , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut :: std :: os :: raw :: c_void , arg5 : * mut :: std :: os :: raw :: c_void , arg6 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Win_delete_attr_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : MPI_Win , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Grequest_query_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * mut MPI_Status ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Grequest_free_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ; pub type MPI_Grequest_cancel_function = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > ; pub const MPI_TAG_UB : _bindgen_ty_1 = 0 ; pub const MPI_HOST : _bindgen_ty_1 = 1 ; pub const MPI_IO : _bindgen_ty_1 = 2 ; pub const MPI_WTIME_IS_GLOBAL : _bindgen_ty_1 = 3 ; pub const MPI_APPNUM : _bindgen_ty_1 = 4 ; pub const MPI_LASTUSEDCODE : _bindgen_ty_1 = 5 ; pub const MPI_UNIVERSE_SIZE : _bindgen_ty_1 = 6 ; pub const MPI_WIN_BASE : _bindgen_ty_1 = 7 ; pub const MPI_WIN_SIZE : _bindgen_ty_1 = 8 ; pub const MPI_WIN_DISP_UNIT : _bindgen_ty_1 = 9 ; pub const MPI_WIN_CREATE_FLAVOR : _bindgen_ty_1 = 10 ; pub const MPI_WIN_MODEL : _bindgen_ty_1 = 11 ; pub const IMPI_CLIENT_SIZE : _bindgen_ty_1 = 12 ; pub const IMPI_CLIENT_COLOR : _bindgen_ty_1 = 13 ; pub const IMPI_HOST_SIZE : _bindgen_ty_1 = 14 ; pub const IMPI_HOST_COLOR : _bindgen_ty_1 = 15 ; pub type _bindgen_ty_1 = :: std :: os :: raw :: c_uint ; pub const MPI_IDENT : _bindgen_ty_2 = 0 ; pub const MPI_CONGRUENT : _bindgen_ty_2 = 1 ; pub const MPI_SIMILAR : _bindgen_ty_2 = 2 ; pub const MPI_UNEQUAL : _bindgen_ty_2 = 3 ; pub type _bindgen_ty_2 = :: std :: os :: raw :: c_uint ; pub const MPI_THREAD_SINGLE : _bindgen_ty_3 = 0 ; pub const MPI_THREAD_FUNNELED : _bindgen_ty_3 = 1 ; pub const MPI_THREAD_SERIALIZED : _bindgen_ty_3 = 2 ; pub const MPI_THREAD_MULTIPLE : _bindgen_ty_3 = 3 ; pub type _bindgen_ty_3 = :: std :: os :: raw :: c_uint ; pub const MPI_COMBINER_NAMED : _bindgen_ty_4 = 0 ; pub const MPI_COMBINER_DUP : _bindgen_ty_4 = 1 ; pub const MPI_COMBINER_CONTIGUOUS : _bindgen_ty_4 = 2 ; pub const MPI_COMBINER_VECTOR : _bindgen_ty_4 = 3 ; pub const MPI_COMBINER_HVECTOR_INTEGER : _bindgen_ty_4 = 4 ; pub const MPI_COMBINER_HVECTOR : _bindgen_ty_4 = 5 ; pub const MPI_COMBINER_INDEXED : _bindgen_ty_4 = 6 ; pub const MPI_COMBINER_HINDEXED_INTEGER : _bindgen_ty_4 = 7 ; pub const MPI_COMBINER_HINDEXED : _bindgen_ty_4 = 8 ; pub const MPI_COMBINER_INDEXED_BLOCK : _bindgen_ty_4 = 9 ; pub const MPI_COMBINER_STRUCT_INTEGER : _bindgen_ty_4 = 10 ; pub const MPI_COMBINER_STRUCT : _bindgen_ty_4 = 11 ; pub const MPI_COMBINER_SUBARRAY : _bindgen_ty_4 = 12 ; pub const MPI_COMBINER_DARRAY : _bindgen_ty_4 = 13 ; pub const MPI_COMBINER_F90_REAL : _bindgen_ty_4 = 14 ; pub const MPI_COMBINER_F90_COMPLEX : _bindgen_ty_4 = 15 ; pub const MPI_COMBINER_F90_INTEGER : _bindgen_ty_4 = 16 ; pub const MPI_COMBINER_RESIZED : _bindgen_ty_4 = 17 ; pub const MPI_COMBINER_HINDEXED_BLOCK : _bindgen_ty_4 = 18 ; pub type _bindgen_ty_4 = :: std :: os :: raw :: c_uint ; pub const MPI_COMM_TYPE_SHARED : _bindgen_ty_5 = 0 ; pub const OMPI_COMM_TYPE_HWTHREAD : _bindgen_ty_5 = 1 ; pub const OMPI_COMM_TYPE_CORE : _bindgen_ty_5 = 2 ; pub const OMPI_COMM_TYPE_L1CACHE : _bindgen_ty_5 = 3 ; pub const OMPI_COMM_TYPE_L2CACHE : _bindgen_ty_5 = 4 ; pub const OMPI_COMM_TYPE_L3CACHE : _bindgen_ty_5 = 5 ; pub const OMPI_COMM_TYPE_SOCKET : _bindgen_ty_5 = 6 ; pub const OMPI_COMM_TYPE_NUMA : _bindgen_ty_5 = 7 ; pub const OMPI_COMM_TYPE_BOARD : _bindgen_ty_5 = 8 ; pub const OMPI_COMM_TYPE_HOST : _bindgen_ty_5 = 9 ; pub const OMPI_COMM_TYPE_CU : _bindgen_ty_5 = 10 ; pub const OMPI_COMM_TYPE_CLUSTER : _bindgen_ty_5 = 11 ; pub type _bindgen_ty_5 = :: std :: os :: raw :: c_uint ; pub const MPI_T_VERBOSITY_USER_BASIC : _bindgen_ty_6 = 0 ; pub const MPI_T_VERBOSITY_USER_DETAIL : _bindgen_ty_6 = 1 ; pub const MPI_T_VERBOSITY_USER_ALL : _bindgen_ty_6 = 2 ; pub const MPI_T_VERBOSITY_TUNER_BASIC : _bindgen_ty_6 = 3 ; pub const MPI_T_VERBOSITY_TUNER_DETAIL : _bindgen_ty_6 = 4 ; pub const MPI_T_VERBOSITY_TUNER_ALL : _bindgen_ty_6 = 5 ; pub const MPI_T_VERBOSITY_MPIDEV_BASIC : _bindgen_ty_6 = 6 ; pub const MPI_T_VERBOSITY_MPIDEV_DETAIL : _bindgen_ty_6 = 7 ; pub const MPI_T_VERBOSITY_MPIDEV_ALL : _bindgen_ty_6 = 8 ; pub type _bindgen_ty_6 = :: std :: os :: raw :: c_uint ; pub const MPI_T_SCOPE_CONSTANT : _bindgen_ty_7 = 0 ; pub const MPI_T_SCOPE_READONLY : _bindgen_ty_7 = 1 ; pub const MPI_T_SCOPE_LOCAL : _bindgen_ty_7 = 2 ; pub const MPI_T_SCOPE_GROUP : _bindgen_ty_7 = 3 ; pub const MPI_T_SCOPE_GROUP_EQ : _bindgen_ty_7 = 4 ; pub const MPI_T_SCOPE_ALL : _bindgen_ty_7 = 5 ; pub const MPI_T_SCOPE_ALL_EQ : _bindgen_ty_7 = 6 ; pub type _bindgen_ty_7 = :: std :: os :: raw :: c_uint ; pub const MPI_T_BIND_NO_OBJECT : _bindgen_ty_8 = 0 ; pub const MPI_T_BIND_MPI_COMM : _bindgen_ty_8 = 1 ; pub const MPI_T_BIND_MPI_DATATYPE : _bindgen_ty_8 = 2 ; pub const MPI_T_BIND_MPI_ERRHANDLER : _bindgen_ty_8 = 3 ; pub const MPI_T_BIND_MPI_FILE : _bindgen_ty_8 = 4 ; pub const MPI_T_BIND_MPI_GROUP : _bindgen_ty_8 = 5 ; pub const MPI_T_BIND_MPI_OP : _bindgen_ty_8 = 6 ; pub const MPI_T_BIND_MPI_REQUEST : _bindgen_ty_8 = 7 ; pub const MPI_T_BIND_MPI_WIN : _bindgen_ty_8 = 8 ; pub const MPI_T_BIND_MPI_MESSAGE : _bindgen_ty_8 = 9 ; pub const MPI_T_BIND_MPI_INFO : _bindgen_ty_8 = 10 ; pub type _bindgen_ty_8 = :: std :: os :: raw :: c_uint ; pub const MPI_T_PVAR_CLASS_STATE : _bindgen_ty_9 = 0 ; pub const MPI_T_PVAR_CLASS_LEVEL : _bindgen_ty_9 = 1 ; pub const MPI_T_PVAR_CLASS_SIZE : _bindgen_ty_9 = 2 ; pub const MPI_T_PVAR_CLASS_PERCENTAGE : _bindgen_ty_9 = 3 ; pub const MPI_T_PVAR_CLASS_HIGHWATERMARK : _bindgen_ty_9 = 4 ; pub const MPI_T_PVAR_CLASS_LOWWATERMARK : _bindgen_ty_9 = 5 ; pub const MPI_T_PVAR_CLASS_COUNTER : _bindgen_ty_9 = 6 ; pub const MPI_T_PVAR_CLASS_AGGREGATE : _bindgen_ty_9 = 7 ; pub const MPI_T_PVAR_CLASS_TIMER : _bindgen_ty_9 = 8 ; pub const MPI_T_PVAR_CLASS_GENERIC : _bindgen_ty_9 = 9 ; pub type _bindgen_ty_9 = :: std :: os :: raw :: c_uint ; extern "C" {
 pub fn OMPI_C_MPI_TYPE_NULL_DELETE_FN ( datatype : MPI_Datatype , type_keyval : :: std :: os :: raw :: c_int , attribute_val_out : * mut :: std :: os :: raw :: c_void , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_TYPE_NULL_COPY_FN ( datatype : MPI_Datatype , type_keyval : :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , attribute_val_in : * mut :: std :: os :: raw :: c_void , attribute_val_out : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_TYPE_DUP_FN ( datatype : MPI_Datatype , type_keyval : :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , attribute_val_in : * mut :: std :: os :: raw :: c_void , attribute_val_out : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_COMM_NULL_DELETE_FN ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , attribute_val_out : * mut :: std :: os :: raw :: c_void , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_COMM_NULL_COPY_FN ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , attribute_val_in : * mut :: std :: os :: raw :: c_void , attribute_val_out : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_COMM_DUP_FN ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , attribute_val_in : * mut :: std :: os :: raw :: c_void , attribute_val_out : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_NULL_DELETE_FN ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , attribute_val_out : * mut :: std :: os :: raw :: c_void , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_NULL_COPY_FN ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , attribute_val_in : * mut :: std :: os :: raw :: c_void , attribute_val_out : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_DUP_FN ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , attribute_val_in : * mut :: std :: os :: raw :: c_void , attribute_val_out : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_WIN_NULL_DELETE_FN ( window : MPI_Win , win_keyval : :: std :: os :: raw :: c_int , attribute_val_out : * mut :: std :: os :: raw :: c_void , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_WIN_NULL_COPY_FN ( window : MPI_Win , win_keyval : :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , attribute_val_in : * mut :: std :: os :: raw :: c_void , attribute_val_out : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn OMPI_C_MPI_WIN_DUP_FN ( window : MPI_Win , win_keyval : :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , attribute_val_in : * mut :: std :: os :: raw :: c_void , attribute_val_out : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_predefined_communicator_t { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}ompi_mpi_comm_world" ] 
 pub static mut  ompi_mpi_comm_world  :  ompi_predefined_communicator_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_comm_self" ] 
 pub static mut  ompi_mpi_comm_self  :  ompi_predefined_communicator_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_comm_null" ] 
 pub static mut  ompi_mpi_comm_null  :  ompi_predefined_communicator_t ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_predefined_group_t { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}ompi_mpi_group_empty" ] 
 pub static mut  ompi_mpi_group_empty  :  ompi_predefined_group_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_group_null" ] 
 pub static mut  ompi_mpi_group_null  :  ompi_predefined_group_t ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_predefined_request_t { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}ompi_request_null" ] 
 pub static mut  ompi_request_null  :  ompi_predefined_request_t ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_predefined_message_t { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}ompi_message_null" ] 
 pub static mut  ompi_message_null  :  ompi_predefined_message_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_message_no_proc" ] 
 pub static mut  ompi_message_no_proc  :  ompi_predefined_message_t ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_predefined_op_t { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_null" ] 
 pub static mut  ompi_mpi_op_null  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_min" ] 
 pub static mut  ompi_mpi_op_min  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_max" ] 
 pub static mut  ompi_mpi_op_max  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_sum" ] 
 pub static mut  ompi_mpi_op_sum  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_prod" ] 
 pub static mut  ompi_mpi_op_prod  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_land" ] 
 pub static mut  ompi_mpi_op_land  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_band" ] 
 pub static mut  ompi_mpi_op_band  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_lor" ] 
 pub static mut  ompi_mpi_op_lor  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_bor" ] 
 pub static mut  ompi_mpi_op_bor  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_lxor" ] 
 pub static mut  ompi_mpi_op_lxor  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_bxor" ] 
 pub static mut  ompi_mpi_op_bxor  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_maxloc" ] 
 pub static mut  ompi_mpi_op_maxloc  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_minloc" ] 
 pub static mut  ompi_mpi_op_minloc  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_replace" ] 
 pub static mut  ompi_mpi_op_replace  :  ompi_predefined_op_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_op_no_op" ] 
 pub static mut  ompi_mpi_op_no_op  :  ompi_predefined_op_t ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_predefined_datatype_t { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}ompi_mpi_datatype_null" ] 
 pub static mut  ompi_mpi_datatype_null  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_lb" ] 
 pub static mut  ompi_mpi_lb  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_ub" ] 
 pub static mut  ompi_mpi_ub  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_char" ] 
 pub static mut  ompi_mpi_char  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_signed_char" ] 
 pub static mut  ompi_mpi_signed_char  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_unsigned_char" ] 
 pub static mut  ompi_mpi_unsigned_char  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_byte" ] 
 pub static mut  ompi_mpi_byte  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_short" ] 
 pub static mut  ompi_mpi_short  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_unsigned_short" ] 
 pub static mut  ompi_mpi_unsigned_short  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_int" ] 
 pub static mut  ompi_mpi_int  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_unsigned" ] 
 pub static mut  ompi_mpi_unsigned  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_long" ] 
 pub static mut  ompi_mpi_long  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_unsigned_long" ] 
 pub static mut  ompi_mpi_unsigned_long  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_long_long_int" ] 
 pub static mut  ompi_mpi_long_long_int  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_unsigned_long_long" ] 
 pub static mut  ompi_mpi_unsigned_long_long  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_float" ] 
 pub static mut  ompi_mpi_float  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_double" ] 
 pub static mut  ompi_mpi_double  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_long_double" ] 
 pub static mut  ompi_mpi_long_double  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_wchar" ] 
 pub static mut  ompi_mpi_wchar  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_packed" ] 
 pub static mut  ompi_mpi_packed  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_cxx_bool" ] 
 pub static mut  ompi_mpi_cxx_bool  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_cxx_cplex" ] 
 pub static mut  ompi_mpi_cxx_cplex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_cxx_dblcplex" ] 
 pub static mut  ompi_mpi_cxx_dblcplex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_cxx_ldblcplex" ] 
 pub static mut  ompi_mpi_cxx_ldblcplex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_logical" ] 
 pub static mut  ompi_mpi_logical  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_character" ] 
 pub static mut  ompi_mpi_character  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_integer" ] 
 pub static mut  ompi_mpi_integer  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_real" ] 
 pub static mut  ompi_mpi_real  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_dblprec" ] 
 pub static mut  ompi_mpi_dblprec  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_cplex" ] 
 pub static mut  ompi_mpi_cplex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_dblcplex" ] 
 pub static mut  ompi_mpi_dblcplex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_ldblcplex" ] 
 pub static mut  ompi_mpi_ldblcplex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_2int" ] 
 pub static mut  ompi_mpi_2int  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_2integer" ] 
 pub static mut  ompi_mpi_2integer  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_2real" ] 
 pub static mut  ompi_mpi_2real  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_2dblprec" ] 
 pub static mut  ompi_mpi_2dblprec  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_2cplex" ] 
 pub static mut  ompi_mpi_2cplex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_2dblcplex" ] 
 pub static mut  ompi_mpi_2dblcplex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_float_int" ] 
 pub static mut  ompi_mpi_float_int  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_double_int" ] 
 pub static mut  ompi_mpi_double_int  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_longdbl_int" ] 
 pub static mut  ompi_mpi_longdbl_int  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_short_int" ] 
 pub static mut  ompi_mpi_short_int  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_long_int" ] 
 pub static mut  ompi_mpi_long_int  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_logical1" ] 
 pub static mut  ompi_mpi_logical1  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_logical2" ] 
 pub static mut  ompi_mpi_logical2  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_logical4" ] 
 pub static mut  ompi_mpi_logical4  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_logical8" ] 
 pub static mut  ompi_mpi_logical8  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_integer1" ] 
 pub static mut  ompi_mpi_integer1  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_integer2" ] 
 pub static mut  ompi_mpi_integer2  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_integer4" ] 
 pub static mut  ompi_mpi_integer4  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_integer8" ] 
 pub static mut  ompi_mpi_integer8  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_integer16" ] 
 pub static mut  ompi_mpi_integer16  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_real2" ] 
 pub static mut  ompi_mpi_real2  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_real4" ] 
 pub static mut  ompi_mpi_real4  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_real8" ] 
 pub static mut  ompi_mpi_real8  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_real16" ] 
 pub static mut  ompi_mpi_real16  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_complex8" ] 
 pub static mut  ompi_mpi_complex8  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_complex16" ] 
 pub static mut  ompi_mpi_complex16  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_complex32" ] 
 pub static mut  ompi_mpi_complex32  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_int8_t" ] 
 pub static mut  ompi_mpi_int8_t  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_uint8_t" ] 
 pub static mut  ompi_mpi_uint8_t  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_int16_t" ] 
 pub static mut  ompi_mpi_int16_t  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_uint16_t" ] 
 pub static mut  ompi_mpi_uint16_t  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_int32_t" ] 
 pub static mut  ompi_mpi_int32_t  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_uint32_t" ] 
 pub static mut  ompi_mpi_uint32_t  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_int64_t" ] 
 pub static mut  ompi_mpi_int64_t  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_uint64_t" ] 
 pub static mut  ompi_mpi_uint64_t  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_aint" ] 
 pub static mut  ompi_mpi_aint  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_offset" ] 
 pub static mut  ompi_mpi_offset  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_count" ] 
 pub static mut  ompi_mpi_count  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_c_bool" ] 
 pub static mut  ompi_mpi_c_bool  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_c_complex" ] 
 pub static mut  ompi_mpi_c_complex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_c_float_complex" ] 
 pub static mut  ompi_mpi_c_float_complex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_c_double_complex" ] 
 pub static mut  ompi_mpi_c_double_complex  :  ompi_predefined_datatype_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_c_long_double_complex" ] 
 pub static mut  ompi_mpi_c_long_double_complex  :  ompi_predefined_datatype_t ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_predefined_errhandler_t { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}ompi_mpi_errhandler_null" ] 
 pub static mut  ompi_mpi_errhandler_null  :  ompi_predefined_errhandler_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_errors_are_fatal" ] 
 pub static mut  ompi_mpi_errors_are_fatal  :  ompi_predefined_errhandler_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_errors_return" ] 
 pub static mut  ompi_mpi_errors_return  :  ompi_predefined_errhandler_t ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_predefined_win_t { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}ompi_mpi_win_null" ] 
 pub static mut  ompi_mpi_win_null  :  ompi_predefined_win_t ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_predefined_file_t { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}ompi_mpi_file_null" ] 
 pub static mut  ompi_mpi_file_null  :  ompi_predefined_file_t ;
} # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ompi_predefined_info_t { _unused : [ u8 ; 0 ] } extern "C" {
 # [ link_name = "\u{1}ompi_mpi_info_null" ] 
 pub static mut  ompi_mpi_info_null  :  ompi_predefined_info_t ;
} extern "C" {
 # [ link_name = "\u{1}ompi_mpi_info_env" ] 
 pub static mut  ompi_mpi_info_env  :  ompi_predefined_info_t ;
} extern "C" {
 # [ link_name = "\u{1}MPI_F_STATUS_IGNORE" ] 
 pub static mut  MPI_F_STATUS_IGNORE  :  * mut :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}MPI_F_STATUSES_IGNORE" ] 
 pub static mut  MPI_F_STATUSES_IGNORE  :  * mut :: std :: os :: raw :: c_int ;
} extern "C" {
 pub fn MPI_Abort ( comm : MPI_Comm , errorcode : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Accumulate ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , op : MPI_Op , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Add_error_class ( errorclass : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Add_error_code ( errorclass : :: std :: os :: raw :: c_int , errorcode : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Add_error_string ( errorcode : :: std :: os :: raw :: c_int , string : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Address ( location : * mut :: std :: os :: raw :: c_void , address : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Allgather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Iallgather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Allgatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Iallgatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Alloc_mem ( size : MPI_Aint , info : MPI_Info , baseptr : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Allreduce ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Iallreduce ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Alltoall ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ialltoall ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Alltoallv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ialltoallv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Alltoallw ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtypes : * const MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtypes : * const MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ialltoallw ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtypes : * const MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtypes : * const MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Attr_delete ( comm : MPI_Comm , keyval : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Attr_get ( comm : MPI_Comm , keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Attr_put ( comm : MPI_Comm , keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Barrier ( comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ibarrier ( comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Bcast ( buffer : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Bsend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ibcast ( buffer : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Bsend_init ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Buffer_attach ( buffer : * mut :: std :: os :: raw :: c_void , size : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Buffer_detach ( buffer : * mut :: std :: os :: raw :: c_void , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Cancel ( request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Cart_coords ( comm : MPI_Comm , rank : :: std :: os :: raw :: c_int , maxdims : :: std :: os :: raw :: c_int , coords : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Cart_create ( old_comm : MPI_Comm , ndims : :: std :: os :: raw :: c_int , dims : * const :: std :: os :: raw :: c_int , periods : * const :: std :: os :: raw :: c_int , reorder : :: std :: os :: raw :: c_int , comm_cart : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Cart_get ( comm : MPI_Comm , maxdims : :: std :: os :: raw :: c_int , dims : * mut :: std :: os :: raw :: c_int , periods : * mut :: std :: os :: raw :: c_int , coords : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Cart_map ( comm : MPI_Comm , ndims : :: std :: os :: raw :: c_int , dims : * const :: std :: os :: raw :: c_int , periods : * const :: std :: os :: raw :: c_int , newrank : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Cart_rank ( comm : MPI_Comm , coords : * const :: std :: os :: raw :: c_int , rank : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Cart_shift ( comm : MPI_Comm , direction : :: std :: os :: raw :: c_int , disp : :: std :: os :: raw :: c_int , rank_source : * mut :: std :: os :: raw :: c_int , rank_dest : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Cart_sub ( comm : MPI_Comm , remain_dims : * const :: std :: os :: raw :: c_int , new_comm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Cartdim_get ( comm : MPI_Comm , ndims : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Close_port ( port_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_accept ( port_name : * const :: std :: os :: raw :: c_char , info : MPI_Info , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_c2f ( comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_call_errhandler ( comm : MPI_Comm , errorcode : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_compare ( comm1 : MPI_Comm , comm2 : MPI_Comm , result : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_connect ( port_name : * const :: std :: os :: raw :: c_char , info : MPI_Info , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_create_errhandler ( function : MPI_Comm_errhandler_function , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_create_keyval ( comm_copy_attr_fn : MPI_Comm_copy_attr_function , comm_delete_attr_fn : MPI_Comm_delete_attr_function , comm_keyval : * mut :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_create_group ( comm : MPI_Comm , group : MPI_Group , tag : :: std :: os :: raw :: c_int , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_create ( comm : MPI_Comm , group : MPI_Group , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_delete_attr ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_disconnect ( comm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_dup ( comm : MPI_Comm , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_idup ( comm : MPI_Comm , newcomm : * mut MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_dup_with_info ( comm : MPI_Comm , info : MPI_Info , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_f2c ( comm : :: std :: os :: raw :: c_int , ) -> MPI_Comm ; 
} extern "C" {
 pub fn MPI_Comm_free_keyval ( comm_keyval : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_free ( comm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_get_attr ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Dist_graph_create ( comm_old : MPI_Comm , n : :: std :: os :: raw :: c_int , nodes : * const :: std :: os :: raw :: c_int , degrees : * const :: std :: os :: raw :: c_int , targets : * const :: std :: os :: raw :: c_int , weights : * const :: std :: os :: raw :: c_int , info : MPI_Info , reorder : :: std :: os :: raw :: c_int , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Dist_graph_create_adjacent ( comm_old : MPI_Comm , indegree : :: std :: os :: raw :: c_int , sources : * const :: std :: os :: raw :: c_int , sourceweights : * const :: std :: os :: raw :: c_int , outdegree : :: std :: os :: raw :: c_int , destinations : * const :: std :: os :: raw :: c_int , destweights : * const :: std :: os :: raw :: c_int , info : MPI_Info , reorder : :: std :: os :: raw :: c_int , comm_dist_graph : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Dist_graph_neighbors ( comm : MPI_Comm , maxindegree : :: std :: os :: raw :: c_int , sources : * mut :: std :: os :: raw :: c_int , sourceweights : * mut :: std :: os :: raw :: c_int , maxoutdegree : :: std :: os :: raw :: c_int , destinations : * mut :: std :: os :: raw :: c_int , destweights : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Dist_graph_neighbors_count ( comm : MPI_Comm , inneighbors : * mut :: std :: os :: raw :: c_int , outneighbors : * mut :: std :: os :: raw :: c_int , weighted : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_get_errhandler ( comm : MPI_Comm , erhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_get_info ( comm : MPI_Comm , info_used : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_get_name ( comm : MPI_Comm , comm_name : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_get_parent ( parent : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_group ( comm : MPI_Comm , group : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_join ( fd : :: std :: os :: raw :: c_int , intercomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_rank ( comm : MPI_Comm , rank : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_remote_group ( comm : MPI_Comm , group : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_remote_size ( comm : MPI_Comm , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_set_attr ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_set_errhandler ( comm : MPI_Comm , errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_set_info ( comm : MPI_Comm , info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_set_name ( comm : MPI_Comm , comm_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_size ( comm : MPI_Comm , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_spawn ( command : * const :: std :: os :: raw :: c_char , argv : * mut * mut :: std :: os :: raw :: c_char , maxprocs : :: std :: os :: raw :: c_int , info : MPI_Info , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , intercomm : * mut MPI_Comm , array_of_errcodes : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_spawn_multiple ( count : :: std :: os :: raw :: c_int , array_of_commands : * mut * mut :: std :: os :: raw :: c_char , array_of_argv : * mut * mut * mut :: std :: os :: raw :: c_char , array_of_maxprocs : * const :: std :: os :: raw :: c_int , array_of_info : * const MPI_Info , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , intercomm : * mut MPI_Comm , array_of_errcodes : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_split ( comm : MPI_Comm , color : :: std :: os :: raw :: c_int , key : :: std :: os :: raw :: c_int , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_split_type ( comm : MPI_Comm , split_type : :: std :: os :: raw :: c_int , key : :: std :: os :: raw :: c_int , info : MPI_Info , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Comm_test_inter ( comm : MPI_Comm , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Compare_and_swap ( origin_addr : * const :: std :: os :: raw :: c_void , compare_addr : * const :: std :: os :: raw :: c_void , result_addr : * mut :: std :: os :: raw :: c_void , datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Dims_create ( nnodes : :: std :: os :: raw :: c_int , ndims : :: std :: os :: raw :: c_int , dims : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Errhandler_c2f ( errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Errhandler_create ( function : MPI_Handler_function , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Errhandler_f2c ( errhandler : :: std :: os :: raw :: c_int , ) -> MPI_Errhandler ; 
} extern "C" {
 pub fn MPI_Errhandler_free ( errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Errhandler_get ( comm : MPI_Comm , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Errhandler_set ( comm : MPI_Comm , errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Error_class ( errorcode : :: std :: os :: raw :: c_int , errorclass : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Error_string ( errorcode : :: std :: os :: raw :: c_int , string : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Exscan ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Fetch_and_op ( origin_addr : * const :: std :: os :: raw :: c_void , result_addr : * mut :: std :: os :: raw :: c_void , datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , op : MPI_Op , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Iexscan ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_c2f ( file : MPI_File , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_f2c ( file : :: std :: os :: raw :: c_int , ) -> MPI_File ; 
} extern "C" {
 pub fn MPI_File_call_errhandler ( fh : MPI_File , errorcode : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_create_errhandler ( function : MPI_File_errhandler_function , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_set_errhandler ( file : MPI_File , errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_errhandler ( file : MPI_File , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_open ( comm : MPI_Comm , filename : * const :: std :: os :: raw :: c_char , amode : :: std :: os :: raw :: c_int , info : MPI_Info , fh : * mut MPI_File , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_close ( fh : * mut MPI_File , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_delete ( filename : * const :: std :: os :: raw :: c_char , info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_set_size ( fh : MPI_File , size : MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_preallocate ( fh : MPI_File , size : MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_size ( fh : MPI_File , size : * mut MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_group ( fh : MPI_File , group : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_amode ( fh : MPI_File , amode : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_set_info ( fh : MPI_File , info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_info ( fh : MPI_File , info_used : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_set_view ( fh : MPI_File , disp : MPI_Offset , etype : MPI_Datatype , filetype : MPI_Datatype , datarep : * const :: std :: os :: raw :: c_char , info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_view ( fh : MPI_File , disp : * mut MPI_Offset , etype : * mut MPI_Datatype , filetype : * mut MPI_Datatype , datarep : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_at ( fh : MPI_File , offset : MPI_Offset , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_at_all ( fh : MPI_File , offset : MPI_Offset , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_at ( fh : MPI_File , offset : MPI_Offset , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_at_all ( fh : MPI_File , offset : MPI_Offset , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_iread_at ( fh : MPI_File , offset : MPI_Offset , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_iwrite_at ( fh : MPI_File , offset : MPI_Offset , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_iread_at_all ( fh : MPI_File , offset : MPI_Offset , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_iwrite_at_all ( fh : MPI_File , offset : MPI_Offset , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_all ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_all ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_iread ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_iwrite ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_iread_all ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_iwrite_all ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_seek ( fh : MPI_File , offset : MPI_Offset , whence : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_position ( fh : MPI_File , offset : * mut MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_byte_offset ( fh : MPI_File , offset : MPI_Offset , disp : * mut MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_shared ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_shared ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_iread_shared ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_iwrite_shared ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_ordered ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_ordered ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_seek_shared ( fh : MPI_File , offset : MPI_Offset , whence : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_position_shared ( fh : MPI_File , offset : * mut MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_at_all_begin ( fh : MPI_File , offset : MPI_Offset , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_at_all_end ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_at_all_begin ( fh : MPI_File , offset : MPI_Offset , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_at_all_end ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_all_begin ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_all_end ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_all_begin ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_all_end ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_ordered_begin ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_read_ordered_end ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_ordered_begin ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_write_ordered_end ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_type_extent ( fh : MPI_File , datatype : MPI_Datatype , extent : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_set_atomicity ( fh : MPI_File , flag : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_get_atomicity ( fh : MPI_File , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_File_sync ( fh : MPI_File , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Finalize ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Finalized ( flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Free_mem ( base : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Gather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Igather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Gatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Igatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Get_address ( location : * const :: std :: os :: raw :: c_void , address : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Get_count ( status : * const MPI_Status , datatype : MPI_Datatype , count : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Get_elements ( status : * const MPI_Status , datatype : MPI_Datatype , count : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Get_elements_x ( status : * const MPI_Status , datatype : MPI_Datatype , count : * mut MPI_Count , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Get ( origin_addr : * mut :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Get_accumulate ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , result_addr : * mut :: std :: os :: raw :: c_void , result_count : :: std :: os :: raw :: c_int , result_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , op : MPI_Op , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Get_library_version ( version : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Get_processor_name ( name : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Get_version ( version : * mut :: std :: os :: raw :: c_int , subversion : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Graph_create ( comm_old : MPI_Comm , nnodes : :: std :: os :: raw :: c_int , index : * const :: std :: os :: raw :: c_int , edges : * const :: std :: os :: raw :: c_int , reorder : :: std :: os :: raw :: c_int , comm_graph : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Graph_get ( comm : MPI_Comm , maxindex : :: std :: os :: raw :: c_int , maxedges : :: std :: os :: raw :: c_int , index : * mut :: std :: os :: raw :: c_int , edges : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Graph_map ( comm : MPI_Comm , nnodes : :: std :: os :: raw :: c_int , index : * const :: std :: os :: raw :: c_int , edges : * const :: std :: os :: raw :: c_int , newrank : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Graph_neighbors_count ( comm : MPI_Comm , rank : :: std :: os :: raw :: c_int , nneighbors : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Graph_neighbors ( comm : MPI_Comm , rank : :: std :: os :: raw :: c_int , maxneighbors : :: std :: os :: raw :: c_int , neighbors : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Graphdims_get ( comm : MPI_Comm , nnodes : * mut :: std :: os :: raw :: c_int , nedges : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Grequest_complete ( request : MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Grequest_start ( query_fn : MPI_Grequest_query_function , free_fn : MPI_Grequest_free_function , cancel_fn : MPI_Grequest_cancel_function , extra_state : * mut :: std :: os :: raw :: c_void , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_c2f ( group : MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_compare ( group1 : MPI_Group , group2 : MPI_Group , result : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_difference ( group1 : MPI_Group , group2 : MPI_Group , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_excl ( group : MPI_Group , n : :: std :: os :: raw :: c_int , ranks : * const :: std :: os :: raw :: c_int , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_f2c ( group : :: std :: os :: raw :: c_int , ) -> MPI_Group ; 
} extern "C" {
 pub fn MPI_Group_free ( group : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_incl ( group : MPI_Group , n : :: std :: os :: raw :: c_int , ranks : * const :: std :: os :: raw :: c_int , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_intersection ( group1 : MPI_Group , group2 : MPI_Group , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_range_excl ( group : MPI_Group , n : :: std :: os :: raw :: c_int , ranges : * mut [ :: std :: os :: raw :: c_int ; 3usize ] , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_range_incl ( group : MPI_Group , n : :: std :: os :: raw :: c_int , ranges : * mut [ :: std :: os :: raw :: c_int ; 3usize ] , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_rank ( group : MPI_Group , rank : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_size ( group : MPI_Group , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_translate_ranks ( group1 : MPI_Group , n : :: std :: os :: raw :: c_int , ranks1 : * const :: std :: os :: raw :: c_int , group2 : MPI_Group , ranks2 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Group_union ( group1 : MPI_Group , group2 : MPI_Group , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ibsend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Improbe ( source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , flag : * mut :: std :: os :: raw :: c_int , message : * mut MPI_Message , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Imrecv ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , type_ : MPI_Datatype , message : * mut MPI_Message , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Info_c2f ( info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Info_create ( info : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Info_delete ( info : MPI_Info , key : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Info_dup ( info : MPI_Info , newinfo : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Info_f2c ( info : :: std :: os :: raw :: c_int , ) -> MPI_Info ; 
} extern "C" {
 pub fn MPI_Info_free ( info : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Info_get ( info : MPI_Info , key : * const :: std :: os :: raw :: c_char , valuelen : :: std :: os :: raw :: c_int , value : * mut :: std :: os :: raw :: c_char , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Info_get_nkeys ( info : MPI_Info , nkeys : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Info_get_nthkey ( info : MPI_Info , n : :: std :: os :: raw :: c_int , key : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Info_get_valuelen ( info : MPI_Info , key : * const :: std :: os :: raw :: c_char , valuelen : * mut :: std :: os :: raw :: c_int , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Info_set ( info : MPI_Info , key : * const :: std :: os :: raw :: c_char , value : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Init ( argc : * mut :: std :: os :: raw :: c_int , argv : * mut * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Initialized ( flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Init_thread ( argc : * mut :: std :: os :: raw :: c_int , argv : * mut * mut * mut :: std :: os :: raw :: c_char , required : :: std :: os :: raw :: c_int , provided : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Intercomm_create ( local_comm : MPI_Comm , local_leader : :: std :: os :: raw :: c_int , bridge_comm : MPI_Comm , remote_leader : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , newintercomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Intercomm_merge ( intercomm : MPI_Comm , high : :: std :: os :: raw :: c_int , newintercomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Iprobe ( source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , flag : * mut :: std :: os :: raw :: c_int , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Irecv ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Irsend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Isend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Issend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Is_thread_main ( flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Keyval_create ( copy_fn : MPI_Copy_function , delete_fn : MPI_Delete_function , keyval : * mut :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Keyval_free ( keyval : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Lookup_name ( service_name : * const :: std :: os :: raw :: c_char , info : MPI_Info , port_name : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Message_c2f ( message : MPI_Message , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Message_f2c ( message : :: std :: os :: raw :: c_int , ) -> MPI_Message ; 
} extern "C" {
 pub fn MPI_Mprobe ( source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , message : * mut MPI_Message , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Mrecv ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , type_ : MPI_Datatype , message : * mut MPI_Message , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Neighbor_allgather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ineighbor_allgather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Neighbor_allgatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ineighbor_allgatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Neighbor_alltoall ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ineighbor_alltoall ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Neighbor_alltoallv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ineighbor_alltoallv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Neighbor_alltoallw ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const MPI_Aint , sendtypes : * const MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const MPI_Aint , recvtypes : * const MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ineighbor_alltoallw ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const MPI_Aint , sendtypes : * const MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const MPI_Aint , recvtypes : * const MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Op_c2f ( op : MPI_Op , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Op_commutative ( op : MPI_Op , commute : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Op_create ( function : MPI_User_function , commute : :: std :: os :: raw :: c_int , op : * mut MPI_Op , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Open_port ( info : MPI_Info , port_name : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Op_f2c ( op : :: std :: os :: raw :: c_int , ) -> MPI_Op ; 
} extern "C" {
 pub fn MPI_Op_free ( op : * mut MPI_Op , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Pack_external ( datarep : * const :: std :: os :: raw :: c_char , inbuf : * const :: std :: os :: raw :: c_void , incount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , outbuf : * mut :: std :: os :: raw :: c_void , outsize : MPI_Aint , position : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Pack_external_size ( datarep : * const :: std :: os :: raw :: c_char , incount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , size : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Pack ( inbuf : * const :: std :: os :: raw :: c_void , incount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , outbuf : * mut :: std :: os :: raw :: c_void , outsize : :: std :: os :: raw :: c_int , position : * mut :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Pack_size ( incount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , comm : MPI_Comm , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Pcontrol ( level : :: std :: os :: raw :: c_int , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Probe ( source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Publish_name ( service_name : * const :: std :: os :: raw :: c_char , info : MPI_Info , port_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Put ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Query_thread ( provided : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Raccumulate ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , op : MPI_Op , win : MPI_Win , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Recv_init ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Recv ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Reduce ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ireduce ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Reduce_local ( inbuf : * const :: std :: os :: raw :: c_void , inoutbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Reduce_scatter ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ireduce_scatter ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Reduce_scatter_block ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ireduce_scatter_block ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Register_datarep ( datarep : * const :: std :: os :: raw :: c_char , read_conversion_fn : MPI_Datarep_conversion_function , write_conversion_fn : MPI_Datarep_conversion_function , dtype_file_extent_fn : MPI_Datarep_extent_function , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Request_c2f ( request : MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Request_f2c ( request : :: std :: os :: raw :: c_int , ) -> MPI_Request ; 
} extern "C" {
 pub fn MPI_Request_free ( request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Request_get_status ( request : MPI_Request , flag : * mut :: std :: os :: raw :: c_int , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Rget ( origin_addr : * mut :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , win : MPI_Win , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Rget_accumulate ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , result_addr : * mut :: std :: os :: raw :: c_void , result_count : :: std :: os :: raw :: c_int , result_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , op : MPI_Op , win : MPI_Win , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Rput ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_cout : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , win : MPI_Win , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Rsend ( ibuf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Rsend_init ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Scan ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Iscan ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Scatter ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Iscatter ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Scatterv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Iscatterv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Send_init ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Send ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Sendrecv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , sendtag : :: std :: os :: raw :: c_int , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , source : :: std :: os :: raw :: c_int , recvtag : :: std :: os :: raw :: c_int , comm : MPI_Comm , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Sendrecv_replace ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , sendtag : :: std :: os :: raw :: c_int , source : :: std :: os :: raw :: c_int , recvtag : :: std :: os :: raw :: c_int , comm : MPI_Comm , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ssend_init ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Ssend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Start ( request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Startall ( count : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Status_c2f ( c_status : * const MPI_Status , f_status : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Status_f2c ( f_status : * const :: std :: os :: raw :: c_int , c_status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Status_set_cancelled ( status : * mut MPI_Status , flag : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Status_set_elements ( status : * mut MPI_Status , datatype : MPI_Datatype , count : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Status_set_elements_x ( status : * mut MPI_Status , datatype : MPI_Datatype , count : MPI_Count , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Testall ( count : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , flag : * mut :: std :: os :: raw :: c_int , array_of_statuses : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Testany ( count : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , index : * mut :: std :: os :: raw :: c_int , flag : * mut :: std :: os :: raw :: c_int , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Test ( request : * mut MPI_Request , flag : * mut :: std :: os :: raw :: c_int , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Test_cancelled ( status : * const MPI_Status , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Testsome ( incount : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , outcount : * mut :: std :: os :: raw :: c_int , array_of_indices : * mut :: std :: os :: raw :: c_int , array_of_statuses : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Topo_test ( comm : MPI_Comm , status : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_c2f ( datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_commit ( type_ : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_contiguous ( count : :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_darray ( size : :: std :: os :: raw :: c_int , rank : :: std :: os :: raw :: c_int , ndims : :: std :: os :: raw :: c_int , gsize_array : * const :: std :: os :: raw :: c_int , distrib_array : * const :: std :: os :: raw :: c_int , darg_array : * const :: std :: os :: raw :: c_int , psize_array : * const :: std :: os :: raw :: c_int , order : :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_f90_complex ( p : :: std :: os :: raw :: c_int , r : :: std :: os :: raw :: c_int , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_f90_integer ( r : :: std :: os :: raw :: c_int , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_f90_real ( p : :: std :: os :: raw :: c_int , r : :: std :: os :: raw :: c_int , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_hindexed_block ( count : :: std :: os :: raw :: c_int , blocklength : :: std :: os :: raw :: c_int , array_of_displacements : * const MPI_Aint , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_hindexed ( count : :: std :: os :: raw :: c_int , array_of_blocklengths : * const :: std :: os :: raw :: c_int , array_of_displacements : * const MPI_Aint , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_hvector ( count : :: std :: os :: raw :: c_int , blocklength : :: std :: os :: raw :: c_int , stride : MPI_Aint , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_keyval ( type_copy_attr_fn : MPI_Type_copy_attr_function , type_delete_attr_fn : MPI_Type_delete_attr_function , type_keyval : * mut :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_indexed_block ( count : :: std :: os :: raw :: c_int , blocklength : :: std :: os :: raw :: c_int , array_of_displacements : * const :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_struct ( count : :: std :: os :: raw :: c_int , array_of_block_lengths : * const :: std :: os :: raw :: c_int , array_of_displacements : * const MPI_Aint , array_of_types : * const MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_subarray ( ndims : :: std :: os :: raw :: c_int , size_array : * const :: std :: os :: raw :: c_int , subsize_array : * const :: std :: os :: raw :: c_int , start_array : * const :: std :: os :: raw :: c_int , order : :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_create_resized ( oldtype : MPI_Datatype , lb : MPI_Aint , extent : MPI_Aint , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_delete_attr ( type_ : MPI_Datatype , type_keyval : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_dup ( type_ : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_extent ( type_ : MPI_Datatype , extent : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_free ( type_ : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_free_keyval ( type_keyval : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_f2c ( datatype : :: std :: os :: raw :: c_int , ) -> MPI_Datatype ; 
} extern "C" {
 pub fn MPI_Type_get_attr ( type_ : MPI_Datatype , type_keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_get_contents ( mtype : MPI_Datatype , max_integers : :: std :: os :: raw :: c_int , max_addresses : :: std :: os :: raw :: c_int , max_datatypes : :: std :: os :: raw :: c_int , array_of_integers : * mut :: std :: os :: raw :: c_int , array_of_addresses : * mut MPI_Aint , array_of_datatypes : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_get_envelope ( type_ : MPI_Datatype , num_integers : * mut :: std :: os :: raw :: c_int , num_addresses : * mut :: std :: os :: raw :: c_int , num_datatypes : * mut :: std :: os :: raw :: c_int , combiner : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_get_extent ( type_ : MPI_Datatype , lb : * mut MPI_Aint , extent : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_get_extent_x ( type_ : MPI_Datatype , lb : * mut MPI_Count , extent : * mut MPI_Count , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_get_name ( type_ : MPI_Datatype , type_name : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_get_true_extent ( datatype : MPI_Datatype , true_lb : * mut MPI_Aint , true_extent : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_get_true_extent_x ( datatype : MPI_Datatype , true_lb : * mut MPI_Count , true_extent : * mut MPI_Count , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_hindexed ( count : :: std :: os :: raw :: c_int , array_of_blocklengths : * mut :: std :: os :: raw :: c_int , array_of_displacements : * mut MPI_Aint , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_hvector ( count : :: std :: os :: raw :: c_int , blocklength : :: std :: os :: raw :: c_int , stride : MPI_Aint , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_indexed ( count : :: std :: os :: raw :: c_int , array_of_blocklengths : * const :: std :: os :: raw :: c_int , array_of_displacements : * const :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_lb ( type_ : MPI_Datatype , lb : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_match_size ( typeclass : :: std :: os :: raw :: c_int , size : :: std :: os :: raw :: c_int , type_ : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_set_attr ( type_ : MPI_Datatype , type_keyval : :: std :: os :: raw :: c_int , attr_val : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_set_name ( type_ : MPI_Datatype , type_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_size ( type_ : MPI_Datatype , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_size_x ( type_ : MPI_Datatype , size : * mut MPI_Count , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_struct ( count : :: std :: os :: raw :: c_int , array_of_blocklengths : * mut :: std :: os :: raw :: c_int , array_of_displacements : * mut MPI_Aint , array_of_types : * mut MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_ub ( mtype : MPI_Datatype , ub : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Type_vector ( count : :: std :: os :: raw :: c_int , blocklength : :: std :: os :: raw :: c_int , stride : :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Unpack ( inbuf : * const :: std :: os :: raw :: c_void , insize : :: std :: os :: raw :: c_int , position : * mut :: std :: os :: raw :: c_int , outbuf : * mut :: std :: os :: raw :: c_void , outcount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Unpublish_name ( service_name : * const :: std :: os :: raw :: c_char , info : MPI_Info , port_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Unpack_external ( datarep : * const :: std :: os :: raw :: c_char , inbuf : * const :: std :: os :: raw :: c_void , insize : MPI_Aint , position : * mut MPI_Aint , outbuf : * mut :: std :: os :: raw :: c_void , outcount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Waitall ( count : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , array_of_statuses : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Waitany ( count : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , index : * mut :: std :: os :: raw :: c_int , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Wait ( request : * mut MPI_Request , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Waitsome ( incount : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , outcount : * mut :: std :: os :: raw :: c_int , array_of_indices : * mut :: std :: os :: raw :: c_int , array_of_statuses : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_allocate ( size : MPI_Aint , disp_unit : :: std :: os :: raw :: c_int , info : MPI_Info , comm : MPI_Comm , baseptr : * mut :: std :: os :: raw :: c_void , win : * mut MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_allocate_shared ( size : MPI_Aint , disp_unit : :: std :: os :: raw :: c_int , info : MPI_Info , comm : MPI_Comm , baseptr : * mut :: std :: os :: raw :: c_void , win : * mut MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_attach ( win : MPI_Win , base : * mut :: std :: os :: raw :: c_void , size : MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_c2f ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_call_errhandler ( win : MPI_Win , errorcode : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_complete ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_create ( base : * mut :: std :: os :: raw :: c_void , size : MPI_Aint , disp_unit : :: std :: os :: raw :: c_int , info : MPI_Info , comm : MPI_Comm , win : * mut MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_create_dynamic ( info : MPI_Info , comm : MPI_Comm , win : * mut MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_create_errhandler ( function : MPI_Win_errhandler_function , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_create_keyval ( win_copy_attr_fn : MPI_Win_copy_attr_function , win_delete_attr_fn : MPI_Win_delete_attr_function , win_keyval : * mut :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_delete_attr ( win : MPI_Win , win_keyval : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_detach ( win : MPI_Win , base : * const :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_f2c ( win : :: std :: os :: raw :: c_int , ) -> MPI_Win ; 
} extern "C" {
 pub fn MPI_Win_fence ( assert : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_flush ( rank : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_flush_all ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_flush_local ( rank : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_flush_local_all ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_free ( win : * mut MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_free_keyval ( win_keyval : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_get_attr ( win : MPI_Win , win_keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_get_errhandler ( win : MPI_Win , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_get_group ( win : MPI_Win , group : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_get_info ( win : MPI_Win , info_used : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_get_name ( win : MPI_Win , win_name : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_lock ( lock_type : :: std :: os :: raw :: c_int , rank : :: std :: os :: raw :: c_int , assert : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_lock_all ( assert : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_post ( group : MPI_Group , assert : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_set_attr ( win : MPI_Win , win_keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_set_errhandler ( win : MPI_Win , errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_set_info ( win : MPI_Win , info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_set_name ( win : MPI_Win , win_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_shared_query ( win : MPI_Win , rank : :: std :: os :: raw :: c_int , size : * mut MPI_Aint , disp_unit : * mut :: std :: os :: raw :: c_int , baseptr : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_start ( group : MPI_Group , assert : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_sync ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_test ( win : MPI_Win , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_unlock ( rank : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_unlock_all ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Win_wait ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_Wtick ( ) -> f64 ; 
} extern "C" {
 pub fn MPI_Wtime ( ) -> f64 ; 
} extern "C" {
 pub fn PMPI_Abort ( comm : MPI_Comm , errorcode : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Accumulate ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , op : MPI_Op , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Add_error_class ( errorclass : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Add_error_code ( errorclass : :: std :: os :: raw :: c_int , errorcode : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Add_error_string ( errorcode : :: std :: os :: raw :: c_int , string : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Address ( location : * mut :: std :: os :: raw :: c_void , address : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Allgather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Iallgather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Allgatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Iallgatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Alloc_mem ( size : MPI_Aint , info : MPI_Info , baseptr : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Allreduce ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Iallreduce ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Alltoall ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ialltoall ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Alltoallv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ialltoallv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Alltoallw ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtypes : * const MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtypes : * const MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ialltoallw ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtypes : * const MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtypes : * const MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Attr_delete ( comm : MPI_Comm , keyval : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Attr_get ( comm : MPI_Comm , keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Dist_graph_create ( comm_old : MPI_Comm , n : :: std :: os :: raw :: c_int , nodes : * const :: std :: os :: raw :: c_int , degrees : * const :: std :: os :: raw :: c_int , targets : * const :: std :: os :: raw :: c_int , weights : * const :: std :: os :: raw :: c_int , info : MPI_Info , reorder : :: std :: os :: raw :: c_int , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Dist_graph_create_adjacent ( comm_old : MPI_Comm , indegree : :: std :: os :: raw :: c_int , sources : * const :: std :: os :: raw :: c_int , sourceweights : * const :: std :: os :: raw :: c_int , outdegree : :: std :: os :: raw :: c_int , destinations : * const :: std :: os :: raw :: c_int , destweights : * const :: std :: os :: raw :: c_int , info : MPI_Info , reorder : :: std :: os :: raw :: c_int , comm_dist_graph : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Dist_graph_neighbors ( comm : MPI_Comm , maxindegree : :: std :: os :: raw :: c_int , sources : * mut :: std :: os :: raw :: c_int , sourceweights : * mut :: std :: os :: raw :: c_int , maxoutdegree : :: std :: os :: raw :: c_int , destinations : * mut :: std :: os :: raw :: c_int , destweights : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Dist_graph_neighbors_count ( comm : MPI_Comm , inneighbors : * mut :: std :: os :: raw :: c_int , outneighbors : * mut :: std :: os :: raw :: c_int , weighted : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Attr_put ( comm : MPI_Comm , keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Barrier ( comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ibarrier ( comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Bcast ( buffer : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ibcast ( buffer : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Bsend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Bsend_init ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Buffer_attach ( buffer : * mut :: std :: os :: raw :: c_void , size : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Buffer_detach ( buffer : * mut :: std :: os :: raw :: c_void , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Cancel ( request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Cart_coords ( comm : MPI_Comm , rank : :: std :: os :: raw :: c_int , maxdims : :: std :: os :: raw :: c_int , coords : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Cart_create ( old_comm : MPI_Comm , ndims : :: std :: os :: raw :: c_int , dims : * const :: std :: os :: raw :: c_int , periods : * const :: std :: os :: raw :: c_int , reorder : :: std :: os :: raw :: c_int , comm_cart : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Cart_get ( comm : MPI_Comm , maxdims : :: std :: os :: raw :: c_int , dims : * mut :: std :: os :: raw :: c_int , periods : * mut :: std :: os :: raw :: c_int , coords : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Cart_map ( comm : MPI_Comm , ndims : :: std :: os :: raw :: c_int , dims : * const :: std :: os :: raw :: c_int , periods : * const :: std :: os :: raw :: c_int , newrank : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Cart_rank ( comm : MPI_Comm , coords : * const :: std :: os :: raw :: c_int , rank : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Cart_shift ( comm : MPI_Comm , direction : :: std :: os :: raw :: c_int , disp : :: std :: os :: raw :: c_int , rank_source : * mut :: std :: os :: raw :: c_int , rank_dest : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Cart_sub ( comm : MPI_Comm , remain_dims : * const :: std :: os :: raw :: c_int , new_comm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Cartdim_get ( comm : MPI_Comm , ndims : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Close_port ( port_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_accept ( port_name : * const :: std :: os :: raw :: c_char , info : MPI_Info , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_c2f ( comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_call_errhandler ( comm : MPI_Comm , errorcode : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_compare ( comm1 : MPI_Comm , comm2 : MPI_Comm , result : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_connect ( port_name : * const :: std :: os :: raw :: c_char , info : MPI_Info , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_create_errhandler ( function : MPI_Comm_errhandler_function , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_create_keyval ( comm_copy_attr_fn : MPI_Comm_copy_attr_function , comm_delete_attr_fn : MPI_Comm_delete_attr_function , comm_keyval : * mut :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_create_group ( comm : MPI_Comm , group : MPI_Group , tag : :: std :: os :: raw :: c_int , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_create ( comm : MPI_Comm , group : MPI_Group , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_delete_attr ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_disconnect ( comm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_dup ( comm : MPI_Comm , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_idup ( comm : MPI_Comm , newcomm : * mut MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_dup_with_info ( comm : MPI_Comm , info : MPI_Info , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_f2c ( comm : :: std :: os :: raw :: c_int , ) -> MPI_Comm ; 
} extern "C" {
 pub fn PMPI_Comm_free_keyval ( comm_keyval : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_free ( comm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_get_attr ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_get_errhandler ( comm : MPI_Comm , erhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_get_info ( comm : MPI_Comm , info_used : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_get_name ( comm : MPI_Comm , comm_name : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_get_parent ( parent : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_group ( comm : MPI_Comm , group : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_join ( fd : :: std :: os :: raw :: c_int , intercomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_rank ( comm : MPI_Comm , rank : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_remote_group ( comm : MPI_Comm , group : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_remote_size ( comm : MPI_Comm , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_set_attr ( comm : MPI_Comm , comm_keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_set_errhandler ( comm : MPI_Comm , errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_set_info ( comm : MPI_Comm , info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_set_name ( comm : MPI_Comm , comm_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_size ( comm : MPI_Comm , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_spawn ( command : * const :: std :: os :: raw :: c_char , argv : * mut * mut :: std :: os :: raw :: c_char , maxprocs : :: std :: os :: raw :: c_int , info : MPI_Info , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , intercomm : * mut MPI_Comm , array_of_errcodes : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_spawn_multiple ( count : :: std :: os :: raw :: c_int , array_of_commands : * mut * mut :: std :: os :: raw :: c_char , array_of_argv : * mut * mut * mut :: std :: os :: raw :: c_char , array_of_maxprocs : * const :: std :: os :: raw :: c_int , array_of_info : * const MPI_Info , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , intercomm : * mut MPI_Comm , array_of_errcodes : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_split ( comm : MPI_Comm , color : :: std :: os :: raw :: c_int , key : :: std :: os :: raw :: c_int , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_split_type ( comm : MPI_Comm , split_type : :: std :: os :: raw :: c_int , key : :: std :: os :: raw :: c_int , info : MPI_Info , newcomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Comm_test_inter ( comm : MPI_Comm , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Compare_and_swap ( origin_addr : * const :: std :: os :: raw :: c_void , compare_addr : * const :: std :: os :: raw :: c_void , result_addr : * mut :: std :: os :: raw :: c_void , datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Dims_create ( nnodes : :: std :: os :: raw :: c_int , ndims : :: std :: os :: raw :: c_int , dims : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Errhandler_c2f ( errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Errhandler_create ( function : MPI_Handler_function , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Errhandler_f2c ( errhandler : :: std :: os :: raw :: c_int , ) -> MPI_Errhandler ; 
} extern "C" {
 pub fn PMPI_Errhandler_free ( errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Errhandler_get ( comm : MPI_Comm , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Errhandler_set ( comm : MPI_Comm , errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Error_class ( errorcode : :: std :: os :: raw :: c_int , errorclass : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Error_string ( errorcode : :: std :: os :: raw :: c_int , string : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Exscan ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Fetch_and_op ( origin_addr : * const :: std :: os :: raw :: c_void , result_addr : * mut :: std :: os :: raw :: c_void , datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , op : MPI_Op , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Iexscan ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_c2f ( file : MPI_File , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_f2c ( file : :: std :: os :: raw :: c_int , ) -> MPI_File ; 
} extern "C" {
 pub fn PMPI_File_call_errhandler ( fh : MPI_File , errorcode : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_create_errhandler ( function : MPI_File_errhandler_function , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_set_errhandler ( file : MPI_File , errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_errhandler ( file : MPI_File , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_open ( comm : MPI_Comm , filename : * const :: std :: os :: raw :: c_char , amode : :: std :: os :: raw :: c_int , info : MPI_Info , fh : * mut MPI_File , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_close ( fh : * mut MPI_File , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_delete ( filename : * const :: std :: os :: raw :: c_char , info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_set_size ( fh : MPI_File , size : MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_preallocate ( fh : MPI_File , size : MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_size ( fh : MPI_File , size : * mut MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_group ( fh : MPI_File , group : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_amode ( fh : MPI_File , amode : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_set_info ( fh : MPI_File , info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_info ( fh : MPI_File , info_used : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_set_view ( fh : MPI_File , disp : MPI_Offset , etype : MPI_Datatype , filetype : MPI_Datatype , datarep : * const :: std :: os :: raw :: c_char , info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_view ( fh : MPI_File , disp : * mut MPI_Offset , etype : * mut MPI_Datatype , filetype : * mut MPI_Datatype , datarep : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_at ( fh : MPI_File , offset : MPI_Offset , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_at_all ( fh : MPI_File , offset : MPI_Offset , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_at ( fh : MPI_File , offset : MPI_Offset , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_at_all ( fh : MPI_File , offset : MPI_Offset , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_iread_at ( fh : MPI_File , offset : MPI_Offset , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_iwrite_at ( fh : MPI_File , offset : MPI_Offset , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_iread_at_all ( fh : MPI_File , offset : MPI_Offset , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_iwrite_at_all ( fh : MPI_File , offset : MPI_Offset , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_all ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_all ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_iread ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_iwrite ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_iread_all ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_iwrite_all ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_seek ( fh : MPI_File , offset : MPI_Offset , whence : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_position ( fh : MPI_File , offset : * mut MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_byte_offset ( fh : MPI_File , offset : MPI_Offset , disp : * mut MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_shared ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_shared ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_iread_shared ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_iwrite_shared ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_ordered ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_ordered ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_seek_shared ( fh : MPI_File , offset : MPI_Offset , whence : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_position_shared ( fh : MPI_File , offset : * mut MPI_Offset , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_at_all_begin ( fh : MPI_File , offset : MPI_Offset , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_at_all_end ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_at_all_begin ( fh : MPI_File , offset : MPI_Offset , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_at_all_end ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_all_begin ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_all_end ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_all_begin ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_all_end ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_ordered_begin ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_read_ordered_end ( fh : MPI_File , buf : * mut :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_ordered_begin ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_write_ordered_end ( fh : MPI_File , buf : * const :: std :: os :: raw :: c_void , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_type_extent ( fh : MPI_File , datatype : MPI_Datatype , extent : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_set_atomicity ( fh : MPI_File , flag : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_get_atomicity ( fh : MPI_File , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_File_sync ( fh : MPI_File , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Finalize ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Finalized ( flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Free_mem ( base : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Gather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Igather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Gatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Igatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Get_address ( location : * const :: std :: os :: raw :: c_void , address : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Get_count ( status : * const MPI_Status , datatype : MPI_Datatype , count : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Get_elements ( status : * const MPI_Status , datatype : MPI_Datatype , count : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Get_elements_x ( status : * const MPI_Status , datatype : MPI_Datatype , count : * mut MPI_Count , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Get ( origin_addr : * mut :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Get_accumulate ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , result_addr : * mut :: std :: os :: raw :: c_void , result_count : :: std :: os :: raw :: c_int , result_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , op : MPI_Op , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Get_library_version ( version : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Get_processor_name ( name : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Get_version ( version : * mut :: std :: os :: raw :: c_int , subversion : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Graph_create ( comm_old : MPI_Comm , nnodes : :: std :: os :: raw :: c_int , index : * const :: std :: os :: raw :: c_int , edges : * const :: std :: os :: raw :: c_int , reorder : :: std :: os :: raw :: c_int , comm_graph : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Graph_get ( comm : MPI_Comm , maxindex : :: std :: os :: raw :: c_int , maxedges : :: std :: os :: raw :: c_int , index : * mut :: std :: os :: raw :: c_int , edges : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Graph_map ( comm : MPI_Comm , nnodes : :: std :: os :: raw :: c_int , index : * const :: std :: os :: raw :: c_int , edges : * const :: std :: os :: raw :: c_int , newrank : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Graph_neighbors_count ( comm : MPI_Comm , rank : :: std :: os :: raw :: c_int , nneighbors : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Graph_neighbors ( comm : MPI_Comm , rank : :: std :: os :: raw :: c_int , maxneighbors : :: std :: os :: raw :: c_int , neighbors : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Graphdims_get ( comm : MPI_Comm , nnodes : * mut :: std :: os :: raw :: c_int , nedges : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Grequest_complete ( request : MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Grequest_start ( query_fn : MPI_Grequest_query_function , free_fn : MPI_Grequest_free_function , cancel_fn : MPI_Grequest_cancel_function , extra_state : * mut :: std :: os :: raw :: c_void , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_c2f ( group : MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_compare ( group1 : MPI_Group , group2 : MPI_Group , result : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_difference ( group1 : MPI_Group , group2 : MPI_Group , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_excl ( group : MPI_Group , n : :: std :: os :: raw :: c_int , ranks : * const :: std :: os :: raw :: c_int , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_f2c ( group : :: std :: os :: raw :: c_int , ) -> MPI_Group ; 
} extern "C" {
 pub fn PMPI_Group_free ( group : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_incl ( group : MPI_Group , n : :: std :: os :: raw :: c_int , ranks : * const :: std :: os :: raw :: c_int , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_intersection ( group1 : MPI_Group , group2 : MPI_Group , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_range_excl ( group : MPI_Group , n : :: std :: os :: raw :: c_int , ranges : * mut [ :: std :: os :: raw :: c_int ; 3usize ] , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_range_incl ( group : MPI_Group , n : :: std :: os :: raw :: c_int , ranges : * mut [ :: std :: os :: raw :: c_int ; 3usize ] , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_rank ( group : MPI_Group , rank : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_size ( group : MPI_Group , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_translate_ranks ( group1 : MPI_Group , n : :: std :: os :: raw :: c_int , ranks1 : * const :: std :: os :: raw :: c_int , group2 : MPI_Group , ranks2 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Group_union ( group1 : MPI_Group , group2 : MPI_Group , newgroup : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ibsend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Improbe ( source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , flag : * mut :: std :: os :: raw :: c_int , message : * mut MPI_Message , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Imrecv ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , type_ : MPI_Datatype , message : * mut MPI_Message , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Info_c2f ( info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Info_create ( info : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Info_delete ( info : MPI_Info , key : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Info_dup ( info : MPI_Info , newinfo : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Info_f2c ( info : :: std :: os :: raw :: c_int , ) -> MPI_Info ; 
} extern "C" {
 pub fn PMPI_Info_free ( info : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Info_get ( info : MPI_Info , key : * const :: std :: os :: raw :: c_char , valuelen : :: std :: os :: raw :: c_int , value : * mut :: std :: os :: raw :: c_char , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Info_get_nkeys ( info : MPI_Info , nkeys : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Info_get_nthkey ( info : MPI_Info , n : :: std :: os :: raw :: c_int , key : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Info_get_valuelen ( info : MPI_Info , key : * const :: std :: os :: raw :: c_char , valuelen : * mut :: std :: os :: raw :: c_int , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Info_set ( info : MPI_Info , key : * const :: std :: os :: raw :: c_char , value : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Init ( argc : * mut :: std :: os :: raw :: c_int , argv : * mut * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Initialized ( flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Init_thread ( argc : * mut :: std :: os :: raw :: c_int , argv : * mut * mut * mut :: std :: os :: raw :: c_char , required : :: std :: os :: raw :: c_int , provided : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Intercomm_create ( local_comm : MPI_Comm , local_leader : :: std :: os :: raw :: c_int , bridge_comm : MPI_Comm , remote_leader : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , newintercomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Intercomm_merge ( intercomm : MPI_Comm , high : :: std :: os :: raw :: c_int , newintercomm : * mut MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Iprobe ( source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , flag : * mut :: std :: os :: raw :: c_int , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Irecv ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Irsend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Isend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Issend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Is_thread_main ( flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Keyval_create ( copy_fn : MPI_Copy_function , delete_fn : MPI_Delete_function , keyval : * mut :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Keyval_free ( keyval : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Lookup_name ( service_name : * const :: std :: os :: raw :: c_char , info : MPI_Info , port_name : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Message_c2f ( message : MPI_Message , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Message_f2c ( message : :: std :: os :: raw :: c_int , ) -> MPI_Message ; 
} extern "C" {
 pub fn PMPI_Mprobe ( source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , message : * mut MPI_Message , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Mrecv ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , type_ : MPI_Datatype , message : * mut MPI_Message , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Neighbor_allgather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ineighbor_allgather ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Neighbor_allgatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ineighbor_allgatherv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Neighbor_alltoall ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ineighbor_alltoall ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Neighbor_alltoallv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ineighbor_alltoallv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Neighbor_alltoallw ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const MPI_Aint , sendtypes : * const MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const MPI_Aint , recvtypes : * const MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ineighbor_alltoallw ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , sdispls : * const MPI_Aint , sendtypes : * const MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , rdispls : * const MPI_Aint , recvtypes : * const MPI_Datatype , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Op_c2f ( op : MPI_Op , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Op_commutative ( op : MPI_Op , commute : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Op_create ( function : MPI_User_function , commute : :: std :: os :: raw :: c_int , op : * mut MPI_Op , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Open_port ( info : MPI_Info , port_name : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Op_f2c ( op : :: std :: os :: raw :: c_int , ) -> MPI_Op ; 
} extern "C" {
 pub fn PMPI_Op_free ( op : * mut MPI_Op , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Pack_external ( datarep : * const :: std :: os :: raw :: c_char , inbuf : * const :: std :: os :: raw :: c_void , incount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , outbuf : * mut :: std :: os :: raw :: c_void , outsize : MPI_Aint , position : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Pack_external_size ( datarep : * const :: std :: os :: raw :: c_char , incount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , size : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Pack ( inbuf : * const :: std :: os :: raw :: c_void , incount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , outbuf : * mut :: std :: os :: raw :: c_void , outsize : :: std :: os :: raw :: c_int , position : * mut :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Pack_size ( incount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , comm : MPI_Comm , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Pcontrol ( level : :: std :: os :: raw :: c_int , ... ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Probe ( source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Publish_name ( service_name : * const :: std :: os :: raw :: c_char , info : MPI_Info , port_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Put ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Query_thread ( provided : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Raccumulate ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , op : MPI_Op , win : MPI_Win , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Recv_init ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Recv ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , source : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Reduce ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ireduce ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Reduce_local ( inbuf : * const :: std :: os :: raw :: c_void , inoutbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , arg1 : MPI_Op , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Reduce_scatter ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ireduce_scatter ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , recvcounts : * const :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Reduce_scatter_block ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ireduce_scatter_block ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Register_datarep ( datarep : * const :: std :: os :: raw :: c_char , read_conversion_fn : MPI_Datarep_conversion_function , write_conversion_fn : MPI_Datarep_conversion_function , dtype_file_extent_fn : MPI_Datarep_extent_function , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Request_c2f ( request : MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Request_f2c ( request : :: std :: os :: raw :: c_int , ) -> MPI_Request ; 
} extern "C" {
 pub fn PMPI_Request_free ( request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Request_get_status ( request : MPI_Request , flag : * mut :: std :: os :: raw :: c_int , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Rget ( origin_addr : * mut :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , win : MPI_Win , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Rget_accumulate ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , result_addr : * mut :: std :: os :: raw :: c_void , result_count : :: std :: os :: raw :: c_int , result_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_count : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , op : MPI_Op , win : MPI_Win , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Rput ( origin_addr : * const :: std :: os :: raw :: c_void , origin_count : :: std :: os :: raw :: c_int , origin_datatype : MPI_Datatype , target_rank : :: std :: os :: raw :: c_int , target_disp : MPI_Aint , target_cout : :: std :: os :: raw :: c_int , target_datatype : MPI_Datatype , win : MPI_Win , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Rsend ( ibuf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Rsend_init ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Scan ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Iscan ( sendbuf : * const :: std :: os :: raw :: c_void , recvbuf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , op : MPI_Op , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Scatter ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Iscatter ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Scatterv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Iscatterv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcounts : * const :: std :: os :: raw :: c_int , displs : * const :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , root : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Send_init ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Send ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Sendrecv ( sendbuf : * const :: std :: os :: raw :: c_void , sendcount : :: std :: os :: raw :: c_int , sendtype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , sendtag : :: std :: os :: raw :: c_int , recvbuf : * mut :: std :: os :: raw :: c_void , recvcount : :: std :: os :: raw :: c_int , recvtype : MPI_Datatype , source : :: std :: os :: raw :: c_int , recvtag : :: std :: os :: raw :: c_int , comm : MPI_Comm , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Sendrecv_replace ( buf : * mut :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , sendtag : :: std :: os :: raw :: c_int , source : :: std :: os :: raw :: c_int , recvtag : :: std :: os :: raw :: c_int , comm : MPI_Comm , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ssend_init ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Ssend ( buf : * const :: std :: os :: raw :: c_void , count : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , dest : :: std :: os :: raw :: c_int , tag : :: std :: os :: raw :: c_int , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Start ( request : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Startall ( count : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Status_c2f ( c_status : * const MPI_Status , f_status : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Status_f2c ( f_status : * const :: std :: os :: raw :: c_int , c_status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Status_set_cancelled ( status : * mut MPI_Status , flag : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Status_set_elements ( status : * mut MPI_Status , datatype : MPI_Datatype , count : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Status_set_elements_x ( status : * mut MPI_Status , datatype : MPI_Datatype , count : MPI_Count , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Testall ( count : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , flag : * mut :: std :: os :: raw :: c_int , array_of_statuses : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Testany ( count : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , index : * mut :: std :: os :: raw :: c_int , flag : * mut :: std :: os :: raw :: c_int , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Test ( request : * mut MPI_Request , flag : * mut :: std :: os :: raw :: c_int , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Test_cancelled ( status : * const MPI_Status , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Testsome ( incount : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , outcount : * mut :: std :: os :: raw :: c_int , array_of_indices : * mut :: std :: os :: raw :: c_int , array_of_statuses : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Topo_test ( comm : MPI_Comm , status : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_c2f ( datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_commit ( type_ : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_contiguous ( count : :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_darray ( size : :: std :: os :: raw :: c_int , rank : :: std :: os :: raw :: c_int , ndims : :: std :: os :: raw :: c_int , gsize_array : * const :: std :: os :: raw :: c_int , distrib_array : * const :: std :: os :: raw :: c_int , darg_array : * const :: std :: os :: raw :: c_int , psize_array : * const :: std :: os :: raw :: c_int , order : :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_f90_complex ( p : :: std :: os :: raw :: c_int , r : :: std :: os :: raw :: c_int , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_f90_integer ( r : :: std :: os :: raw :: c_int , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_f90_real ( p : :: std :: os :: raw :: c_int , r : :: std :: os :: raw :: c_int , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_hindexed ( count : :: std :: os :: raw :: c_int , array_of_blocklengths : * const :: std :: os :: raw :: c_int , array_of_displacements : * const MPI_Aint , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_hvector ( count : :: std :: os :: raw :: c_int , blocklength : :: std :: os :: raw :: c_int , stride : MPI_Aint , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_keyval ( type_copy_attr_fn : MPI_Type_copy_attr_function , type_delete_attr_fn : MPI_Type_delete_attr_function , type_keyval : * mut :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_hindexed_block ( count : :: std :: os :: raw :: c_int , blocklength : :: std :: os :: raw :: c_int , array_of_displacements : * const MPI_Aint , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_indexed_block ( count : :: std :: os :: raw :: c_int , blocklength : :: std :: os :: raw :: c_int , array_of_displacements : * const :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_struct ( count : :: std :: os :: raw :: c_int , array_of_block_lengths : * const :: std :: os :: raw :: c_int , array_of_displacements : * const MPI_Aint , array_of_types : * const MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_subarray ( ndims : :: std :: os :: raw :: c_int , size_array : * const :: std :: os :: raw :: c_int , subsize_array : * const :: std :: os :: raw :: c_int , start_array : * const :: std :: os :: raw :: c_int , order : :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_create_resized ( oldtype : MPI_Datatype , lb : MPI_Aint , extent : MPI_Aint , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_delete_attr ( type_ : MPI_Datatype , type_keyval : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_dup ( type_ : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_extent ( type_ : MPI_Datatype , extent : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_free ( type_ : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_free_keyval ( type_keyval : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_f2c ( datatype : :: std :: os :: raw :: c_int , ) -> MPI_Datatype ; 
} extern "C" {
 pub fn PMPI_Type_get_attr ( type_ : MPI_Datatype , type_keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_get_contents ( mtype : MPI_Datatype , max_integers : :: std :: os :: raw :: c_int , max_addresses : :: std :: os :: raw :: c_int , max_datatypes : :: std :: os :: raw :: c_int , array_of_integers : * mut :: std :: os :: raw :: c_int , array_of_addresses : * mut MPI_Aint , array_of_datatypes : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_get_envelope ( type_ : MPI_Datatype , num_integers : * mut :: std :: os :: raw :: c_int , num_addresses : * mut :: std :: os :: raw :: c_int , num_datatypes : * mut :: std :: os :: raw :: c_int , combiner : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_get_extent ( type_ : MPI_Datatype , lb : * mut MPI_Aint , extent : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_get_extent_x ( type_ : MPI_Datatype , lb : * mut MPI_Count , extent : * mut MPI_Count , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_get_name ( type_ : MPI_Datatype , type_name : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_get_true_extent ( datatype : MPI_Datatype , true_lb : * mut MPI_Aint , true_extent : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_get_true_extent_x ( datatype : MPI_Datatype , true_lb : * mut MPI_Count , true_extent : * mut MPI_Count , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_hindexed ( count : :: std :: os :: raw :: c_int , array_of_blocklengths : * mut :: std :: os :: raw :: c_int , array_of_displacements : * mut MPI_Aint , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_hvector ( count : :: std :: os :: raw :: c_int , blocklength : :: std :: os :: raw :: c_int , stride : MPI_Aint , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_indexed ( count : :: std :: os :: raw :: c_int , array_of_blocklengths : * const :: std :: os :: raw :: c_int , array_of_displacements : * const :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_lb ( type_ : MPI_Datatype , lb : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_match_size ( typeclass : :: std :: os :: raw :: c_int , size : :: std :: os :: raw :: c_int , type_ : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_set_attr ( type_ : MPI_Datatype , type_keyval : :: std :: os :: raw :: c_int , attr_val : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_set_name ( type_ : MPI_Datatype , type_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_size ( type_ : MPI_Datatype , size : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_size_x ( type_ : MPI_Datatype , size : * mut MPI_Count , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_struct ( count : :: std :: os :: raw :: c_int , array_of_blocklengths : * mut :: std :: os :: raw :: c_int , array_of_displacements : * mut MPI_Aint , array_of_types : * mut MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_ub ( mtype : MPI_Datatype , ub : * mut MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Type_vector ( count : :: std :: os :: raw :: c_int , blocklength : :: std :: os :: raw :: c_int , stride : :: std :: os :: raw :: c_int , oldtype : MPI_Datatype , newtype : * mut MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Unpack ( inbuf : * const :: std :: os :: raw :: c_void , insize : :: std :: os :: raw :: c_int , position : * mut :: std :: os :: raw :: c_int , outbuf : * mut :: std :: os :: raw :: c_void , outcount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Unpublish_name ( service_name : * const :: std :: os :: raw :: c_char , info : MPI_Info , port_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Unpack_external ( datarep : * const :: std :: os :: raw :: c_char , inbuf : * const :: std :: os :: raw :: c_void , insize : MPI_Aint , position : * mut MPI_Aint , outbuf : * mut :: std :: os :: raw :: c_void , outcount : :: std :: os :: raw :: c_int , datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Waitall ( count : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , array_of_statuses : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Waitany ( count : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , index : * mut :: std :: os :: raw :: c_int , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Wait ( request : * mut MPI_Request , status : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Waitsome ( incount : :: std :: os :: raw :: c_int , array_of_requests : * mut MPI_Request , outcount : * mut :: std :: os :: raw :: c_int , array_of_indices : * mut :: std :: os :: raw :: c_int , array_of_statuses : * mut MPI_Status , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_allocate ( size : MPI_Aint , disp_unit : :: std :: os :: raw :: c_int , info : MPI_Info , comm : MPI_Comm , baseptr : * mut :: std :: os :: raw :: c_void , win : * mut MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_allocate_shared ( size : MPI_Aint , disp_unit : :: std :: os :: raw :: c_int , info : MPI_Info , comm : MPI_Comm , baseptr : * mut :: std :: os :: raw :: c_void , win : * mut MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_attach ( win : MPI_Win , base : * mut :: std :: os :: raw :: c_void , size : MPI_Aint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_c2f ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_call_errhandler ( win : MPI_Win , errorcode : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_complete ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_create ( base : * mut :: std :: os :: raw :: c_void , size : MPI_Aint , disp_unit : :: std :: os :: raw :: c_int , info : MPI_Info , comm : MPI_Comm , win : * mut MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_create_dynamic ( info : MPI_Info , comm : MPI_Comm , win : * mut MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_create_errhandler ( function : MPI_Win_errhandler_function , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_create_keyval ( win_copy_attr_fn : MPI_Win_copy_attr_function , win_delete_attr_fn : MPI_Win_delete_attr_function , win_keyval : * mut :: std :: os :: raw :: c_int , extra_state : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_delete_attr ( win : MPI_Win , win_keyval : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_detach ( win : MPI_Win , base : * const :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_f2c ( win : :: std :: os :: raw :: c_int , ) -> MPI_Win ; 
} extern "C" {
 pub fn PMPI_Win_fence ( assert : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_flush ( rank : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_flush_all ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_flush_local ( rank : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_flush_local_all ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_free ( win : * mut MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_free_keyval ( win_keyval : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_get_attr ( win : MPI_Win , win_keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_get_errhandler ( win : MPI_Win , errhandler : * mut MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_get_group ( win : MPI_Win , group : * mut MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_get_info ( win : MPI_Win , info_used : * mut MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_get_name ( win : MPI_Win , win_name : * mut :: std :: os :: raw :: c_char , resultlen : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_lock ( lock_type : :: std :: os :: raw :: c_int , rank : :: std :: os :: raw :: c_int , assert : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_lock_all ( assert : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_post ( group : MPI_Group , assert : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_set_attr ( win : MPI_Win , win_keyval : :: std :: os :: raw :: c_int , attribute_val : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_set_errhandler ( win : MPI_Win , errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_set_info ( win : MPI_Win , info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_set_name ( win : MPI_Win , win_name : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_shared_query ( win : MPI_Win , rank : :: std :: os :: raw :: c_int , size : * mut MPI_Aint , disp_unit : * mut :: std :: os :: raw :: c_int , baseptr : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_start ( group : MPI_Group , assert : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_sync ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_test ( win : MPI_Win , flag : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_unlock ( rank : :: std :: os :: raw :: c_int , win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_unlock_all ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Win_wait ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_Wtick ( ) -> f64 ; 
} extern "C" {
 pub fn PMPI_Wtime ( ) -> f64 ; 
} extern "C" {
 pub fn PMPI_T_init_thread ( required : :: std :: os :: raw :: c_int , provided : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_finalize ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_cvar_get_num ( num_cvar : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_cvar_get_info ( cvar_index : :: std :: os :: raw :: c_int , name : * mut :: std :: os :: raw :: c_char , name_len : * mut :: std :: os :: raw :: c_int , verbosity : * mut :: std :: os :: raw :: c_int , datatype : * mut MPI_Datatype , enumtype : * mut MPI_T_enum , desc : * mut :: std :: os :: raw :: c_char , desc_len : * mut :: std :: os :: raw :: c_int , bind : * mut :: std :: os :: raw :: c_int , scope : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_cvar_get_index ( name : * const :: std :: os :: raw :: c_char , cvar_index : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_cvar_handle_alloc ( cvar_index : :: std :: os :: raw :: c_int , obj_handle : * mut :: std :: os :: raw :: c_void , handle : * mut MPI_T_cvar_handle , count : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_cvar_handle_free ( handle : * mut MPI_T_cvar_handle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_cvar_read ( handle : MPI_T_cvar_handle , buf : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_cvar_write ( handle : MPI_T_cvar_handle , buf : * const :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_category_get_num ( num_cat : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_category_get_info ( cat_index : :: std :: os :: raw :: c_int , name : * mut :: std :: os :: raw :: c_char , name_len : * mut :: std :: os :: raw :: c_int , desc : * mut :: std :: os :: raw :: c_char , desc_len : * mut :: std :: os :: raw :: c_int , num_cvars : * mut :: std :: os :: raw :: c_int , num_pvars : * mut :: std :: os :: raw :: c_int , num_categories : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_category_get_index ( name : * const :: std :: os :: raw :: c_char , category_index : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_category_get_cvars ( cat_index : :: std :: os :: raw :: c_int , len : :: std :: os :: raw :: c_int , indices : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_category_get_pvars ( cat_index : :: std :: os :: raw :: c_int , len : :: std :: os :: raw :: c_int , indices : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_category_get_categories ( cat_index : :: std :: os :: raw :: c_int , len : :: std :: os :: raw :: c_int , indices : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_category_changed ( stamp : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_get_num ( num_pvar : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_get_info ( pvar_index : :: std :: os :: raw :: c_int , name : * mut :: std :: os :: raw :: c_char , name_len : * mut :: std :: os :: raw :: c_int , verbosity : * mut :: std :: os :: raw :: c_int , var_class : * mut :: std :: os :: raw :: c_int , datatype : * mut MPI_Datatype , enumtype : * mut MPI_T_enum , desc : * mut :: std :: os :: raw :: c_char , desc_len : * mut :: std :: os :: raw :: c_int , bind : * mut :: std :: os :: raw :: c_int , readonly : * mut :: std :: os :: raw :: c_int , continuous : * mut :: std :: os :: raw :: c_int , atomic : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_get_index ( name : * const :: std :: os :: raw :: c_char , var_class : :: std :: os :: raw :: c_int , pvar_index : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_session_create ( session : * mut MPI_T_pvar_session , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_session_free ( session : * mut MPI_T_pvar_session , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_handle_alloc ( session : MPI_T_pvar_session , pvar_index : :: std :: os :: raw :: c_int , obj_handle : * mut :: std :: os :: raw :: c_void , handle : * mut MPI_T_pvar_handle , count : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_handle_free ( session : MPI_T_pvar_session , handle : * mut MPI_T_pvar_handle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_start ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_stop ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_read ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , buf : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_write ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , buf : * const :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_reset ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_pvar_readreset ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , buf : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_enum_get_info ( enumtype : MPI_T_enum , num : * mut :: std :: os :: raw :: c_int , name : * mut :: std :: os :: raw :: c_char , name_len : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn PMPI_T_enum_get_item ( enumtype : MPI_T_enum , index : :: std :: os :: raw :: c_int , value : * mut :: std :: os :: raw :: c_int , name : * mut :: std :: os :: raw :: c_char , name_len : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_init_thread ( required : :: std :: os :: raw :: c_int , provided : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_finalize ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_cvar_get_num ( num_cvar : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_cvar_get_info ( cvar_index : :: std :: os :: raw :: c_int , name : * mut :: std :: os :: raw :: c_char , name_len : * mut :: std :: os :: raw :: c_int , verbosity : * mut :: std :: os :: raw :: c_int , datatype : * mut MPI_Datatype , enumtype : * mut MPI_T_enum , desc : * mut :: std :: os :: raw :: c_char , desc_len : * mut :: std :: os :: raw :: c_int , bind : * mut :: std :: os :: raw :: c_int , scope : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_cvar_get_index ( name : * const :: std :: os :: raw :: c_char , cvar_index : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_cvar_handle_alloc ( cvar_index : :: std :: os :: raw :: c_int , obj_handle : * mut :: std :: os :: raw :: c_void , handle : * mut MPI_T_cvar_handle , count : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_cvar_handle_free ( handle : * mut MPI_T_cvar_handle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_cvar_read ( handle : MPI_T_cvar_handle , buf : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_cvar_write ( handle : MPI_T_cvar_handle , buf : * const :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_category_get_num ( num_cat : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_category_get_info ( cat_index : :: std :: os :: raw :: c_int , name : * mut :: std :: os :: raw :: c_char , name_len : * mut :: std :: os :: raw :: c_int , desc : * mut :: std :: os :: raw :: c_char , desc_len : * mut :: std :: os :: raw :: c_int , num_cvars : * mut :: std :: os :: raw :: c_int , num_pvars : * mut :: std :: os :: raw :: c_int , num_categories : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_category_get_index ( name : * const :: std :: os :: raw :: c_char , category_index : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_category_get_cvars ( cat_index : :: std :: os :: raw :: c_int , len : :: std :: os :: raw :: c_int , indices : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_category_get_pvars ( cat_index : :: std :: os :: raw :: c_int , len : :: std :: os :: raw :: c_int , indices : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_category_get_categories ( cat_index : :: std :: os :: raw :: c_int , len : :: std :: os :: raw :: c_int , indices : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_category_changed ( stamp : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_get_num ( num_pvar : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_get_info ( pvar_index : :: std :: os :: raw :: c_int , name : * mut :: std :: os :: raw :: c_char , name_len : * mut :: std :: os :: raw :: c_int , verbosity : * mut :: std :: os :: raw :: c_int , var_class : * mut :: std :: os :: raw :: c_int , datatype : * mut MPI_Datatype , enumtype : * mut MPI_T_enum , desc : * mut :: std :: os :: raw :: c_char , desc_len : * mut :: std :: os :: raw :: c_int , bind : * mut :: std :: os :: raw :: c_int , readonly : * mut :: std :: os :: raw :: c_int , continuous : * mut :: std :: os :: raw :: c_int , atomic : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_get_index ( name : * const :: std :: os :: raw :: c_char , var_class : :: std :: os :: raw :: c_int , pvar_index : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_session_create ( session : * mut MPI_T_pvar_session , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_session_free ( session : * mut MPI_T_pvar_session , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_handle_alloc ( session : MPI_T_pvar_session , pvar_index : :: std :: os :: raw :: c_int , obj_handle : * mut :: std :: os :: raw :: c_void , handle : * mut MPI_T_pvar_handle , count : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_handle_free ( session : MPI_T_pvar_session , handle : * mut MPI_T_pvar_handle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_start ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_stop ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_read ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , buf : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_write ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , buf : * const :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_reset ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_pvar_readreset ( session : MPI_T_pvar_session , handle : MPI_T_pvar_handle , buf : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_enum_get_info ( enumtype : MPI_T_enum , num : * mut :: std :: os :: raw :: c_int , name : * mut :: std :: os :: raw :: c_char , name_len : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn MPI_T_enum_get_item ( enumtype : MPI_T_enum , index : :: std :: os :: raw :: c_int , value : * mut :: std :: os :: raw :: c_int , name : * mut :: std :: os :: raw :: c_char , name_len : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} pub type RSMPI_Fint = :: std :: os :: raw :: c_int ; extern "C" {
 # [ link_name = "\u{1}RSMPI_C_BOOL" ] 
 pub static mut  RSMPI_C_BOOL  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_FLOAT" ] 
 pub static mut  RSMPI_FLOAT  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_DOUBLE" ] 
 pub static mut  RSMPI_DOUBLE  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_COMPLEX" ] 
 pub static mut  RSMPI_COMPLEX  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_DOUBLE_COMPLEX" ] 
 pub static mut  RSMPI_DOUBLE_COMPLEX  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_INT8_T" ] 
 pub static mut  RSMPI_INT8_T  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_INT16_T" ] 
 pub static mut  RSMPI_INT16_T  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_INT32_T" ] 
 pub static mut  RSMPI_INT32_T  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_INT64_T" ] 
 pub static mut  RSMPI_INT64_T  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_UINT8_T" ] 
 pub static mut  RSMPI_UINT8_T  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_UINT16_T" ] 
 pub static mut  RSMPI_UINT16_T  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_UINT32_T" ] 
 pub static mut  RSMPI_UINT32_T  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_UINT64_T" ] 
 pub static mut  RSMPI_UINT64_T  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_DATATYPE_NULL" ] 
 pub static mut  RSMPI_DATATYPE_NULL  :  MPI_Datatype ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_COMM_WORLD" ] 
 pub static mut  RSMPI_COMM_WORLD  :  MPI_Comm ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_COMM_NULL" ] 
 pub static mut  RSMPI_COMM_NULL  :  MPI_Comm ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_COMM_SELF" ] 
 pub static mut  RSMPI_COMM_SELF  :  MPI_Comm ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_COMM_TYPE_SHARED" ] 
 pub static mut  RSMPI_COMM_TYPE_SHARED  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_GROUP_EMPTY" ] 
 pub static mut  RSMPI_GROUP_EMPTY  :  MPI_Group ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_GROUP_NULL" ] 
 pub static mut  RSMPI_GROUP_NULL  :  MPI_Group ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_UNDEFINED" ] 
 pub static mut  RSMPI_UNDEFINED  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_PROC_NULL" ] 
 pub static mut  RSMPI_PROC_NULL  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_ANY_SOURCE" ] 
 pub static mut  RSMPI_ANY_SOURCE  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_ANY_TAG" ] 
 pub static mut  RSMPI_ANY_TAG  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_MESSAGE_NULL" ] 
 pub static mut  RSMPI_MESSAGE_NULL  :  MPI_Message ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_MESSAGE_NO_PROC" ] 
 pub static mut  RSMPI_MESSAGE_NO_PROC  :  MPI_Message ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_REQUEST_NULL" ] 
 pub static mut  RSMPI_REQUEST_NULL  :  MPI_Request ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_STATUS_IGNORE" ] 
 pub static mut  RSMPI_STATUS_IGNORE  :  * const MPI_Status ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_STATUSES_IGNORE" ] 
 pub static mut  RSMPI_STATUSES_IGNORE  :  * const MPI_Status ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_IDENT" ] 
 pub static mut  RSMPI_IDENT  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_CONGRUENT" ] 
 pub static mut  RSMPI_CONGRUENT  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_SIMILAR" ] 
 pub static mut  RSMPI_SIMILAR  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_UNEQUAL" ] 
 pub static mut  RSMPI_UNEQUAL  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_THREAD_SINGLE" ] 
 pub static mut  RSMPI_THREAD_SINGLE  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_THREAD_FUNNELED" ] 
 pub static mut  RSMPI_THREAD_FUNNELED  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_THREAD_SERIALIZED" ] 
 pub static mut  RSMPI_THREAD_SERIALIZED  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_THREAD_MULTIPLE" ] 
 pub static mut  RSMPI_THREAD_MULTIPLE  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_GRAPH" ] 
 pub static mut  RSMPI_GRAPH  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_CART" ] 
 pub static mut  RSMPI_CART  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_DIST_GRAPH" ] 
 pub static mut  RSMPI_DIST_GRAPH  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_MAX_LIBRARY_VERSION_STRING" ] 
 pub static mut  RSMPI_MAX_LIBRARY_VERSION_STRING  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_MAX_PROCESSOR_NAME" ] 
 pub static mut  RSMPI_MAX_PROCESSOR_NAME  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_MAX" ] 
 pub static mut  RSMPI_MAX  :  MPI_Op ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_MIN" ] 
 pub static mut  RSMPI_MIN  :  MPI_Op ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_SUM" ] 
 pub static mut  RSMPI_SUM  :  MPI_Op ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_PROD" ] 
 pub static mut  RSMPI_PROD  :  MPI_Op ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_LAND" ] 
 pub static mut  RSMPI_LAND  :  MPI_Op ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_BAND" ] 
 pub static mut  RSMPI_BAND  :  MPI_Op ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_LOR" ] 
 pub static mut  RSMPI_LOR  :  MPI_Op ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_BOR" ] 
 pub static mut  RSMPI_BOR  :  MPI_Op ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_LXOR" ] 
 pub static mut  RSMPI_LXOR  :  MPI_Op ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_BXOR" ] 
 pub static mut  RSMPI_BXOR  :  MPI_Op ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_ERRORS_ARE_FATAL" ] 
 pub static mut  RSMPI_ERRORS_ARE_FATAL  :  MPI_Errhandler ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_ERRORS_RETURN" ] 
 pub static mut  RSMPI_ERRORS_RETURN  :  MPI_Errhandler ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_FILE_NULL" ] 
 pub static mut  RSMPI_FILE_NULL  :  MPI_File ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_INFO_NULL" ] 
 pub static mut  RSMPI_INFO_NULL  :  MPI_Info ;
} extern "C" {
 # [ link_name = "\u{1}RSMPI_WIN_NULL" ] 
 pub static mut  RSMPI_WIN_NULL  :  MPI_Win ;
} extern "C" {
 pub fn RSMPI_Wtime ( ) -> f64 ; 
} extern "C" {
 pub fn RSMPI_Wtick ( ) -> f64 ; 
} extern "C" {
 pub fn RSMPI_Comm_c2f ( comm : MPI_Comm , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn RSMPI_Comm_f2c ( comm : :: std :: os :: raw :: c_int , ) -> MPI_Comm ; 
} extern "C" {
 pub fn RSMPI_Errhandler_c2f ( errhandler : MPI_Errhandler , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn RSMPI_Errhandler_f2c ( errhandler : :: std :: os :: raw :: c_int , ) -> MPI_Errhandler ; 
} extern "C" {
 pub fn RSMPI_File_c2f ( file : MPI_File , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn RSMPI_File_f2c ( file : :: std :: os :: raw :: c_int , ) -> MPI_File ; 
} extern "C" {
 pub fn RSMPI_Group_c2f ( group : MPI_Group , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn RSMPI_Group_f2c ( group : :: std :: os :: raw :: c_int , ) -> MPI_Group ; 
} extern "C" {
 pub fn RSMPI_Info_c2f ( info : MPI_Info , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn RSMPI_Info_f2c ( info : :: std :: os :: raw :: c_int , ) -> MPI_Info ; 
} extern "C" {
 pub fn RSMPI_Message_c2f ( message : MPI_Message , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn RSMPI_Message_f2c ( message : :: std :: os :: raw :: c_int , ) -> MPI_Message ; 
} extern "C" {
 pub fn RSMPI_Op_c2f ( op : MPI_Op , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn RSMPI_Op_f2c ( op : :: std :: os :: raw :: c_int , ) -> MPI_Op ; 
} extern "C" {
 pub fn RSMPI_Request_c2f ( request : MPI_Request , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn RSMPI_Request_f2c ( request : :: std :: os :: raw :: c_int , ) -> MPI_Request ; 
} extern "C" {
 pub fn RSMPI_Type_c2f ( datatype : MPI_Datatype , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn RSMPI_Type_f2c ( datatype : :: std :: os :: raw :: c_int , ) -> MPI_Datatype ; 
} extern "C" {
 pub fn RSMPI_Win_c2f ( win : MPI_Win , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn RSMPI_Win_f2c ( win : :: std :: os :: raw :: c_int , ) -> MPI_Win ; 
}